<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在CentOS上安装Nginx</title>
    <link href="/2025/01/23/2025-01-23-nginx-on-centos/"/>
    <url>/2025/01/23/2025-01-23-nginx-on-centos/</url>
    
    <content type="html"><![CDATA[<p>一直以来，我都是使用Debian系统，用于搭建个人网站或者其他项目，中途也接触过CentOS，感觉使用上还是有些区别的，但是没有更深入的了解，正好昨天需要在客户CentOS上安装Nginx，借此机会记录一下</p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>与Debian使用apt包管理工具不同，CentOS使用yum。但是在CentOS上安装Nginx之前，需要先安装epel-release。</p><p>EPEL（Extra Packages for Enterprise Linux）是由 Fedora 社区打造的额外软件包仓库，提供了许多基本仓库中没有的软件包。CentOS的基础软件仓库中并不包含Nginx，所以我们需要先启用EPEL仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install epel-release<br>sudo yum install nginx<br></code></pre></td></tr></table></figure><p>如果遇到权限问题，请确保使用sudo执行上述命令。</p><h2 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h2><p>之前我都是使用service nginx start 启动Nginx，但是CentOS上没有这个命令，所以需要使用systemctl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start nginx<br>sudo systemctl status nginx<br></code></pre></td></tr></table></figure><h2 id="测试Nginx"><a href="#测试Nginx" class="headerlink" title="测试Nginx"></a>测试Nginx</h2><p>按照过往经验，nginx启动之后就能正常运行了，访问ip就能看到nginx的欢迎页面，但是现在访问ip显示refused to connect</p><p><img src="https://github.com/user-attachments/assets/69827f54-3eb7-4e35-ab6f-17fb83e30552" alt="Image"></p><p>但是Nginx是正常启动的啊，curl 127.0.0.1 也是正常返回的</p><p><img src="https://github.com/user-attachments/assets/7b36a83c-d929-4db7-a7c6-3c334caf3e63" alt="Image"></p><p>应该是防火墙的问题了，之前在腾讯云、谷歌云的服务器，默认都是开放80端口的</p><h2 id="开放防火墙"><a href="#开放防火墙" class="headerlink" title="开放防火墙"></a>开放防火墙</h2><p>CentOS使用firewalld管理防火墙，所以需要开放防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --permanent --add-service=http<br>firewall-cmd --permanent --add-port=80/tcp<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>OK显示正常了，但是竟然是CentOS欢迎页，而不是nginx的欢迎页<br><img src="https://github.com/user-attachments/assets/e134d41d-b887-45c1-9131-7dd661fc8ce1" alt="Image"></p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>在Debian的&#x2F;etc&#x2F;nginx&#x2F;nginx.conf中，有以下两行，说明nginx的配置有两个来源有两个文件夹，正常需要将配置文件放在&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;，然后使用ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F; 创建软链接，然后重启Nginx，当然你像CentOS一样直接放在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;也是可以的，只是不建议这么做</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">include /etc/nginx/conf.d/*.conf;<br>include /etc/nginx/sites-enabled/*;<br></code></pre></td></tr></table></figure><p>在CentOS的&#x2F;etc&#x2F;nginx&#x2F;nginx.conf中，有以下一行，所以只需要将配置文件放在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;，然后重启nginx就可以生效了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">include /etc/nginx/conf.d/*.conf;<br></code></pre></td></tr></table></figure><h2 id="主要目录"><a href="#主要目录" class="headerlink" title="主要目录"></a>主要目录</h2><p>他们的主要目录如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Debian/Ubuntu</span><br>主配置文件：/etc/nginx/nginx.conf<br>站点配置：/etc/nginx/sites-available/<br>启用的站点：/etc/nginx/sites-enabled/<br>默认站点目录：/var/www/html/<br><br><span class="hljs-comment"># CentOS</span><br>主配置文件：/etc/nginx/nginx.conf<br>站点配置：/etc/nginx/conf.d/<br>默认站点目录：/usr/share/nginx/html/<br></code></pre></td></tr></table></figure><p>为什么CentOS版本的Nginx的欢迎页面是CentOS的欢迎页面，而不是Nginx的欢迎页面呢？看一下CentOS的默认目录<br><img src="https://github.com/user-attachments/assets/282f3a1c-1f1a-46e2-88a6-84042f05ebe8" alt="Image"></p><p>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F; 下的index.html是一个软连接，指向了 &#x2F;usr&#x2F;share&#x2F;doc&#x2F;HTML&#x2F;index.html ，也就是CentOS的欢迎页面</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用就简单了，在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F; 下创建一个文件test.conf，然后写入以下配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">5173</span> default_server;<br>        <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">5173</span> default_server;<br><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">root</span> /usr/share/nginx/test;<br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">index</span> index.html index.htm;<br><br>        <span class="hljs-attribute">server_name</span> _;<br><br>        <span class="hljs-section">location</span> / &#123;<br>                <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果端口5173没有开放，还要在防火墙放开一下这个端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --permanent --add-port=5173/tcp<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>把前端打包后的文件放到&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;test下，然后重启nginx就可以生效了，这时候访问ip:5173就可以看到前端页面了</p><p>重启Nginx的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart nginx<br></code></pre></td></tr></table></figure><p>检查配置文件语法是否正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nginx -t<br></code></pre></td></tr></table></figure><p>如果需要查看Nginx的错误日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">tail</span> -f /var/log/nginx/error.log<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>有趣</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>深入理解展开语法和剩余参数</title>
    <link href="/2025/01/22/2025-01-22-spread-syntax-and-rest-parameters/"/>
    <url>/2025/01/22/2025-01-22-spread-syntax-and-rest-parameters/</url>
    
    <content type="html"><![CDATA[<p>写文档之前我首先要吐槽一下，真是不吐不快。最近半年被薅去搞我们公司sass产品的定制化开发去了，期间有些需求是外包做的，两个月接触下来终于理解了为什么hr会那么歧视有外包工作经验的人了，简历个个都是五年八年，一千多一人天的，结果一问三不知，还不如实习生，实习生起码愿意学。</p><ul><li><p>连代码都找不到在哪，用react devTools找不到在哪，就不会全局搜关键字吗，代码里搜不到就网络接口里搜啊，干什么都要react devTools，Elements是满足不了你是吧<br><img src="https://github.com/user-attachments/assets/a0936780-e6a9-470d-8bf8-6ec1ed19d094" alt="Image"></p></li><li><p>连最基础的git都用不明白，git stash 没听过，说了也不用，代码回撤靠手动一行一行删，ssh生成密钥不会也不知道百度（虽然百度很垃圾，但是遇到问题连百度都不会，就知道问问问的人不是更垃圾吗？）发了《提问的智慧》国内链接，估计也是没看过，搞得我把签名都改成好消息，好消息，本人已与百度达成战略合作，以后不会的可以直接问百度了<br><img src="https://github.com/user-attachments/assets/c4086979-e5d2-442b-a771-6e52b342ca8f" alt="Image"></p></li><li><p>一个前端开发用webstorm就算了，咱也不是有歧视的人，你就是用文本编辑器写我也没意见，主要是你就不能管管你的编辑器吗？老是自动去行尾空格，review 代码的时候，明明只有一行改动，我要对比几十行，说了几次都不改，也不知道手动百度一下<br><img src="https://github.com/user-attachments/assets/ddf19b2a-46b3-44d8-abbf-54282a8e1132" alt="Image"></p></li><li><p>让对齐一下html标签，回复理由竟然是怕手动对齐不准确，一时间我竟无言以对<br><img src="https://github.com/user-attachments/assets/a63befb7-00f5-4a24-9cc3-c10d2641b4ba" alt="Image"><br><img src="https://github.com/user-attachments/assets/896388e2-6c23-4504-bd79-75310b9de387" alt="Image"></p></li><li><p>参数三个不行，两个就正常，也不看参数传到哪里，给谁用了<br><img src="https://github.com/user-attachments/assets/14c55c0b-ba1d-4200-b35a-6eb9ce92c3c7" alt="Image"></p></li><li><p>前面明明有判断，是否存在某个变量，把这条语句删了直接对变量解构赋值了<br><img src="https://github.com/user-attachments/assets/1d958d24-5ea7-47e1-974a-11a3e0e51afa" alt="Image"></p></li><li><p>把数组变量当作或运算的条件，就算是空数组也是true啊<br><img src="https://github.com/user-attachments/assets/1d6e0f16-f16e-4c22-8380-7bf0bcefb1aa" alt="Image"></p></li></ul><p>还有其他各种问题，就懒的一一列举了，我个人感觉我已经很有耐心了，也教了他很多，但是上面的这些问题都不是技术能力导致的，而是学习能力和态度问题，写代码不动脑子，写完不检查就提交，也不让gpt检查下自己写的有没有问题</p><h2 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h2><p>为什么要吐槽上面一堆呢，因为他还写了一段下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">value.<span class="hljs-title function_">push</span>(&#123;<br>  ...(variableA === <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; &#123;<br>    a,<br>  &#125;)<br>&#125;);<br></code></pre></td></tr></table></figure><p>我看到真的气笑了，这是人能写出来的啊？variableA &#x3D;&#x3D;&#x3D; ‘A’为true的时候正常，为false的时候，展开运算符也能展开布尔值吗？嗨你别说还真能，这回让他瞎猫碰上死耗子了</p><p><img src="https://github.com/user-attachments/assets/65b2f50d-4eab-4079-82da-a95ec17eb838" alt="Image"></p><p>为什么会出现这种情况呢，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax">MDN</a> 上不是说只能展开数组、字符串和字面量对象吗？</p><p>cursor 告诉我，对象展开运算符 (…) 在对象字面量中的行为和在数组中的行为是不同的：<br>数组展开运算符：确实只能展开可迭代对象（iterables），比如数组、字符串、Set、Map等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 正确</span><br>[...<span class="hljs-string">&quot;abc&quot;</span>]  <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br>[...[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]]  <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;]</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 错误 - 会抛出错误</span><br>[...<span class="hljs-literal">undefined</span>]  <span class="hljs-comment">// TypeError: undefined is not iterable</span><br>[...<span class="hljs-number">42</span>]  <span class="hljs-comment">// TypeError: 42 is not iterable</span><br></code></pre></td></tr></table></figure><p>对象展开运算符：可以展开任何值，但只有对象类型会产生实际效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 对象展开的行为：</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>  ...<span class="hljs-literal">undefined</span>,  <span class="hljs-comment">// 不会添加任何属性</span><br>  ...<span class="hljs-literal">null</span>,       <span class="hljs-comment">// 不会添加任何属性</span><br>  ...<span class="hljs-number">42</span>,         <span class="hljs-comment">// 不会添加任何属性</span><br>  ...<span class="hljs-literal">true</span>,       <span class="hljs-comment">// 不会添加任何属性</span><br>  ...&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;      <span class="hljs-comment">// 会添加 a: 1</span><br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);  <span class="hljs-comment">// &#123;a: 1&#125;</span><br></code></pre></td></tr></table></figure><p>为什么会有这种情况呢？他说了一下简化版的对象展开运算符内部实现原理，但是我没找到对应的源代码，v8都是c写的找不到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 简化版的对象展开运算符内部实现原理</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">objectSpread</span>(<span class="hljs-params">target, source</span>) &#123;<br>  <span class="hljs-comment">// 1. 将 source 转换为对象</span><br>  <span class="hljs-keyword">const</span> fromObj = <span class="hljs-title class_">Object</span>(source);<br>  <br>  <span class="hljs-comment">// 2. 获取所有可枚举属性</span><br>  <span class="hljs-keyword">const</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(fromObj);<br>  <br>  <span class="hljs-comment">// 3. 复制属性</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">of</span> keys) &#123;<br>    target[key] = fromObj[key];<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-keyword">const</span> result = &#123;<br>  ...<span class="hljs-literal">undefined</span>,  <span class="hljs-comment">// Object(undefined) 返回空对象 &#123;&#125;</span><br>  ...<span class="hljs-literal">null</span>,       <span class="hljs-comment">// Object(null) 返回空对象 &#123;&#125;</span><br>  ...<span class="hljs-number">42</span>,         <span class="hljs-comment">// Object(42) 返回 Number 对象，但没有自身可枚举属性</span><br>  ...&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;      <span class="hljs-comment">// 正常复制属性</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>但是我测试下来发现布尔值是个例外，Object(false)会返回Boolean {false}，Boolean {false} &#x3D;&#x3D;&#x3D; false 又为true，这不是又回到…false死循环了吗，不知道怎么做的。</p><p>这种设计的原因主要有：</p><ul><li>容错性考虑</li><li>允许展开非对象值而不抛出错误，使代码更健壮</li><li>特别是在处理可能为 undefined 的动态数据时很有用</li><li>一致性考虑</li><li>与 Object() 构造函数的行为保持一致</li><li>与 JavaScript 其他隐式类型转换的宽松特性保持一致</li></ul><p>为什么数组不采用这种容错性考虑呢？因为数组是有序集合,需要明确的迭代规则来保证顺序，所以他使用了迭代器</p><ol><li>获取迭代器</li></ol><ul><li>通过 GetIterator() 抽象操作获取被展开对象的迭代器</li><li>如果对象不可迭代,会抛出 TypeError</li></ul><ol start="2"><li>迭代过程</li></ol><ul><li>通过迭代器的 next() 方法获取每个值</li><li>将获取到的值按顺序插入到数组中</li></ul><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>我看了MDN才知道还有剩余参数这个说法, 虽然我一直使用他们，但是没考虑过它们之间细微的区别</p><p>首先，展开语法和剩余参数的符号都是三个点 … , 但是它们的作用是相反的</p><ul><li>展开语法：将一个数组或可迭代对象展开为多个独立的值</li><li>剩余参数：将多个独立的值组合成一个数组</li></ul><p>剩余参数主要用于接受函数参数和解构赋值中，类似arguments，但是arguments是类数组，而剩余参数是真正的数组</p><p>用在函数参数中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">...args</span>) &#123;<br>  <span class="hljs-keyword">return</span> args.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));  <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><p>用在解构赋值中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [first, ...rest] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(first);  <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);   <span class="hljs-comment">// [2, 3, 4]</span><br></code></pre></td></tr></table></figure><p>当然剩余参数也可以用在对象解构中，只是不知道为什么MDN上没有提到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; a, ...rest &#125; = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);  <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);  <span class="hljs-comment">// &#123; b: 2, c: 3 &#125;</span><br></code></pre></td></tr></table></figure><p>给MDN提issue了，希望他们能更新一下 <a href="https://github.com/mdn/mdn/issues/629">https://github.com/mdn/mdn/issues/629</a></p>]]></content>
    
    
    <categories>
      
      <category>有趣</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面对骚扰诈骗邮件我做了什么，还能做什么？</title>
    <link href="/2024/02/29/2024-02-29-investigating-and-reporting-email-scams/"/>
    <url>/2024/02/29/2024-02-29-investigating-and-reporting-email-scams/</url>
    
    <content type="html"><![CDATA[<p>前几个月的某一天，在我想办法解决bug的时候qq邮箱突然发来了一条提示：<strong>通知：因您本人2023年还款行为超出预期，现为您更新本年个人专属消费额度，请前往确认(AD)</strong> ，我寻思我信用卡有什么新状况了，然后就点进去看了下，果不其然上当了，是一条骚扰信息，然后刚才解决bug的思路全断了</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/6078debe-4b92-4d38-98b5-552446eb1c3b" alt="image"></p><p>这时候我想起来，为什么这种类似的邮件标题名我见过好几次呢，为此我翻了下之前的收件箱，果不其然有五六条。你发广告可以接受，你冒充信用卡 支付宝发短信骗人真是是可忍，孰不可忍，为此，我深入调查收集证据并进行了12315市场监督局 12377网信办 12321网络不良与垃圾信息举报受理中心的投诉，下面分享一下我的经历</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/f178057f-a500-4d98-b691-a09ae7ec9043" alt="image"></p><h2 id="收集证据"><a href="#收集证据" class="headerlink" title="收集证据"></a>收集证据</h2><p>首先骚扰邮件主要分为三个部分：发件人地址，邮件内容图片地址和跳转地址，这三块的内容都可能是不同的。作为程序员我们应该都清楚，知道域名可以通过whois查询域名的注册信息，有的注册信息可能只有域名注册商知道，只显示给你一串id，你拿到这串id向注册商请求才可能找到真实信息，也有直接显示本身的注册信息的。为此我查了下这几封邮件的所有相关地址和whois信息，详细结果可以直接点击这个语雀文档查看 <a href="https://www.yuque.com/xuetengfei/kb/ggvd2bf2w66kklg4">https://www.yuque.com/xuetengfei/kb/ggvd2bf2w66kklg4</a></p><p>就比如说2024-01-01这封骚扰邮件，新年第一天就收到骚扰邮件，真晦气<br><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/e2d11275-2ecc-4355-beed-d786ea6595fd" alt="image"></p><h3 id="发件人"><a href="#发件人" class="headerlink" title="发件人"></a>发件人</h3><p>从图中可以看到发件人为<strong><a href="mailto:&#115;&#x79;&#x73;&#x74;&#x65;&#x6d;&#x40;&#x6e;&#101;&#119;&#x73;&#x6c;&#x65;&#116;&#x74;&#x65;&#114;&#x2e;&#99;&#111;&#115;&#x65;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6e;">&#115;&#x79;&#x73;&#x74;&#x65;&#x6d;&#x40;&#x6e;&#101;&#119;&#x73;&#x6c;&#x65;&#116;&#x74;&#x65;&#114;&#x2e;&#99;&#111;&#115;&#x65;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6e;</a></strong>，通过whois查询这个域名 <a href="https://whois.chinaz.com/cosemail.cn">https://whois.chinaz.com/cosemail.cn</a> ，发现域名注册商是 <strong>广州稳流互动网络有限公司</strong></p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/4ee8504c-5ddb-4019-8071-dfc5580f132e" alt="image"></p><h3 id="邮件图片地址"><a href="#邮件图片地址" class="headerlink" title="邮件图片地址"></a>邮件图片地址</h3><p>图片的地址是 zwank.com，whois查询出来是域名注册商的信息，但是没关系，我国有条特殊政策就是域名需要备案，通过icp备案查询 <a href="https://icp.chinaz.com/zwwank.com">https://icp.chinaz.com/zwwank.com</a> ， 发现备案主办单位也是 <strong>广州稳流互动网络有限公司</strong> ，巧了么不是</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/334a310c-4c4b-4617-8be3-fc9df4798bfc" alt="image"></p><h3 id="跳转地址"><a href="#跳转地址" class="headerlink" title="跳转地址"></a>跳转地址</h3><p>跳转地址是从joipee.com 跳转到 <a href="https://wat.wodeyxbb.cn/">https://wat.wodeyxbb.cn/</a> ，joipee.com 备案主办单位也是 <strong>广州稳流互动网络有限公司</strong> ，至于这个 wodeyxbb.cn 则是个人注册的 名叫<strong>陈妙</strong>，</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/b9c972fe-f151-4a74-a0b3-cf35ab19d03b" alt="image"></p><p>通过whois查询<strong>陈妙</strong>，发现竟然还有qq</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/50cf5e62-7acf-4325-ab33-5bb53e491708" alt="image"></p><p>但是站长之家没有完整显示qq，没事，我用命令行自己查也行  <strong>whois wodeyxbb.cn</strong> </p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/0ace250b-abad-4d05-b8d5-ea2679fa45bd" alt="image"></p><p>原来是你啊</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/3222c788-a9ab-4f72-b764-36887574715a" alt="image"></p><p>都一个多月过去了，发消息不回我，呵呵😄</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/16c0432c-3240-4195-ab6f-9f3dda10cbda" alt="image"></p><h2 id="举报"><a href="#举报" class="headerlink" title="举报"></a>举报</h2><p>我把上面几封邮件的证据都写在了 <a href="https://www.yuque.com/xuetengfei/kb/ggvd2bf2w66kklg4">https://www.yuque.com/xuetengfei/kb/ggvd2bf2w66kklg4</a> 这个文档里，然后向12315 12377 12321举报，主要有两点，第一：涉嫌非法搜集我的个人信息邮箱账号，第二：骚扰、虚假信息，并涉嫌诈骗，因为我去黑猫投诉上搜了下，很多被这种邮件跳转的三方链接诈骗到的，为了响应国家反诈号召，净化网络空间，自己怎么也要出份力不是</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/fd8cd13c-ce99-460c-951c-21d8e503b248" alt="image"></p><h3 id="12315市场监督管理局"><a href="#12315市场监督管理局" class="headerlink" title="12315市场监督管理局"></a>12315市场监督管理局</h3><p>企查查查到 广州稳流互动网络有限公司 位于 广东省广州市天河区， 我就在12315小程序上进行了相关投诉</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/48fbc8ae-f658-45ff-9b90-5d1053ab5cbb" alt="image"></p><p>昨天12315打电话通知我，说他联系了广州稳流互动，对方说邮件内容是深圳豪斯莱提供的，邮箱账号是北京品世信息提供的，让我去找另外两家公司。</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/3a0b0b07-c69b-47ff-82e2-8afe7148cc7f" alt="image"></p><p>真是奇了，第一：邮件内容地址都是稳流的服务器。第二：邮箱就算是北京品世信息提供的，广州稳流是不是也涉嫌买卖公民个人信息。第三：最主要是的骚扰、诈骗邮件发件人备案主办单位就是广州稳流，这个怎么不敢提了。我问12315的工作人员，他说核实到的就是他说的反馈的信息，至于我提供的证据，他说他不管这一块没法核实，让我去12321投诉</p><p>不得不说12315真的是和稀泥的一把好手，2021年我在杭州一家名叫猫舍犬舍的店买了只猫，一周内就猫瘟花了五六千没救回来，找12315投诉要求退钱，也是一直和稀泥。我昨天看了下这个个店竟然还在，只不过又换了一个名字piupiu宠物家，这个店也是1818黄金眼的常客了，但是没办法</p><h3 id="12377网信办不良信息举报中心"><a href="#12377网信办不良信息举报中心" class="headerlink" title="12377网信办不良信息举报中心"></a>12377网信办不良信息举报中心</h3><p>举报一个月了，并且这个只能填网址，证据都没有上传的地方，当然也是石沉大海了<br><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/9b16b88e-8e93-44a0-b9df-3c078456a4b5" alt="image"></p><h3 id="12321网络不良与垃圾信息举报受理中心"><a href="#12321网络不良与垃圾信息举报受理中心" class="headerlink" title="12321网络不良与垃圾信息举报受理中心"></a>12321网络不良与垃圾信息举报受理中心</h3><p>就算成功了也只能封ip，可以说基本上没什么用，换个vps服务器或者代理ip，都不带重样的</p><p><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/38f485a2-9177-44ab-98b6-02f315fc665e" alt="image"><br><img src="https://github.com/XueMeijing/xuemeijing.github.io/assets/35559153/c39d5750-5174-4684-8040-de9b02fe5b0c" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以说折腾了这么久，也没有什么进展，该be evil的还是be evil</p>]]></content>
    
    
    <categories>
      
      <category>有趣</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2023年河南省大学生国家安全知识竞赛网页技术解密</title>
    <link href="/2023/05/17/2023-05-17-decoding-font-encryption/"/>
    <url>/2023/05/17/2023-05-17-decoding-font-encryption/</url>
    
    <content type="html"><![CDATA[<p>昨天一个后端朋友给我发了一张截图，问我这个<a href="https://2023gjaqzsjs.haedu.cn/gajs/#/questionBank">2023年河南省大学生国家安全知识竞赛网页</a>f12内DOM节点显示韩文，但是页面显示是中文，复制出来的结果是韩文，问我怎么回事。我也是第一次见这种情况，便研究了起来。本文主要记录我调试和发现答案的流程，涉及两部分，一个是该网页字体解密，一个是JSON数据AES解密</p><p><strong>刚写完这篇文章，刷新就打不开这个网页了，发现竞赛学习时间过了🥲</strong></p><h1 id="网页字体解密"><a href="#网页字体解密" class="headerlink" title="网页字体解密"></a>网页字体解密</h1><p><strong>注意：以下截图均为github链接，不用vpn很大可能打不开</strong></p><h2 id="定位原因"><a href="#定位原因" class="headerlink" title="定位原因"></a>定位原因</h2><p>通过调试发现，这类字体都有.secret类名，该类名指定使用一个名叫ddjdt的font-family，去掉该font-family属性页面正常显示为韩文，因此确定是字体原因</p><p><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/15cef2a3-607c-46d1-b121-cd81522cc36b" alt="image"></p><h2 id="寻找资料-了解原理"><a href="#寻找资料-了解原理" class="headerlink" title="寻找资料 了解原理"></a>寻找资料 了解原理</h2><p>在网络上搜索字体加密有很多文档，大部分都是拿猫眼的网页当做例子，但是由于每个网站的加密方式不一样，所以那些教程不一定适用于该网页，但是整体的流程大概明白了。</p><p>简单来说字体加密主要是为了反爬虫和防复制，比如猫眼这些网站就是为了防止别人爬数据，对于这个知识竞赛网页主要是为了防止复制搜答案。</p><p>对于汉字 <strong>我</strong> 来说，他可以有宋体、黑体、微软雅黑等不同的字形展示，但是他们对应的Unicode编码是同一个，同理也可以创造一个新的字体库叫animal，把 <strong>我</strong> 对应的字形描绘成老虎，这样浏览器在碰到 <strong>我</strong> 的Unicode时，就会把它渲染成老虎的样式。字体库内部使用TTGlyph来存储字形轮廓信息，它和SVG一样都是矢量图形格式。</p><p>所以该网页DOM内部是韩文，这些韩文的Unicode编码对应的字形实际上是微软雅黑或者其他字体库的汉字字形TTGlyph，导致页面渲染出来是汉字。</p><h2 id="字体库xml分析验证"><a href="#字体库xml分析验证" class="headerlink" title="字体库xml分析验证"></a>字体库xml分析验证</h2><p>打开css发现该字体使用的是 <a href="https://2023gjaqzsjs.haedu.cn/fonts/wryh2.ttf">https://2023gjaqzsjs.haedu.cn/fonts/wryh2.ttf</a> 这个字体文件，下载文件，然后用python把ttf转换成xml文件看到字体库内部结构，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fontTools.ttLib <span class="hljs-keyword">import</span> TTFont, TTCollection<br><br><span class="hljs-comment"># 某些字体库是集合，TTFont会报错，需要用TTCollection</span><br>font = TTFont(<span class="hljs-string">&quot;wryh2.ttf&quot;</span>)<br>font.saveXML(<span class="hljs-string">&quot;wryh2.xml&quot;</span>)<br></code></pre></td></tr></table></figure><p>解析后的xml文件首先看到的是GlyphOrder，内部有很多GlyphID</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlyphOrder</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">GlyphID</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;glyph00000&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">GlyphID</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;glyph00001&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">GlyphID</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;glyph00002&quot;</span>/&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">GlyphOrder</span>&gt;</span><br></code></pre></td></tr></table></figure><p>搜索 glyph00002，可以看到对应一个Unicode编码 0xb460</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cmap_format_4</span> <span class="hljs-attr">platformID</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">platEncID</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">code</span>=<span class="hljs-string">&quot;0xb45c&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;glyph00157&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- HANGUL SYLLABLE DULS --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">code</span>=<span class="hljs-string">&quot;0xb460&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;glyph00002&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- HANGUL SYLLABLE DUM --&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">cmap_format_4</span>&gt;</span><br></code></pre></td></tr></table></figure><p>转换0xb460打印出来是韩文，也证实了上面的说法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-string">&#x27;0xb460&#x27;</span>) <span class="hljs-comment">// &#x27;둠&#x27;</span><br></code></pre></td></tr></table></figure><p>同时与glyph00002相关的还有这个TTGlyph，也就是它的字形文件了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">TTGlyph</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;glyph00002&quot;</span> <span class="hljs-attr">xMin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">yMin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">xMax</span>=<span class="hljs-string">&quot;1077&quot;</span> <span class="hljs-attr">yMax</span>=<span class="hljs-string">&quot;1582&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">contour</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pt</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;1077&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">on</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pt</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;189&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">on</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pt</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;189&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;169&quot;</span> <span class="hljs-attr">on</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pt</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;536&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;169&quot;</span> <span class="hljs-attr">on</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pt</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;536&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;1345&quot;</span> <span class="hljs-attr">on</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pt</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;180&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;1242&quot;</span> <span class="hljs-attr">on</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pt</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;180&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;1422&quot;</span> <span class="hljs-attr">on</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pt</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;731&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;1582&quot;</span> <span class="hljs-attr">on</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pt</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;731&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;169&quot;</span> <span class="hljs-attr">on</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pt</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;1077&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;169&quot;</span> <span class="hljs-attr">on</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">contour</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">instructions</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">TTGlyph</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="操作、预览字体库"><a href="#操作、预览字体库" class="headerlink" title="操作、预览字体库"></a>操作、预览字体库</h2><p>在查找的文档中，很多人说可以用FontCreator加载字体库，但是它只适用于windows，并且有试用期，故放弃。问了chatGPT后说可以用BirdFont和FontDrop，</p><ul><li><a href="https://birdfont.org/">BirdFont</a>：免费，有mac客户端，可以根据Unicode搜索</li><li><a href="https://fontdrop.info/">FontDrop</a>：免费，网页端，没有搜索功能</li><li><a href="https://kekee000.github.io/fonteditor/">百度字体编辑器</a>：免费，网页端，可以根据Unicode搜索(吐个槽，百度好像把这个产品下架了，这个链接还是github的)</li></ul><p>我使用的是FontDrop，很方便，把字体文件拖进来就能解析，可以看到字体名称和字体作者等信息<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/b977cedc-77aa-4ac2-88a3-a2559f670d46" alt="image"><br>下面是字体展示，鼠标滑过会展示该字形的Unicode<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/06594a36-c206-43e7-9a6c-0181eac5a31c" alt="image"><br>分析DOM结构，获取全部字形的Unicode<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/f7f31764-7173-4b49-a20a-3aad1f8077c8" alt="image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#glyph-list-end&#x27;</span>).<span class="hljs-property">children</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> regex = <span class="hljs-regexp">/Unicode:\s+(\w+)/</span>;<br>  <span class="hljs-keyword">const</span> match = item.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>].<span class="hljs-property">textContent</span>.<span class="hljs-title function_">match</span>(regex);<br>  <br>  <span class="hljs-keyword">if</span> (match) &#123;<br>    <span class="hljs-keyword">const</span> unicode = match[<span class="hljs-number">1</span>];<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(unicode); <span class="hljs-comment">// 输出: BFEE</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;未找到匹配的内容&#x27;</span>);<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>执行结果如下<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/51659aee-f59d-4d0f-ad0a-e5047460432d" alt="image"><br>emmmm。竟然还有未找到匹配的内容，调试后发现该字形的Unicode是鼠标滑过字形后动态插入到DOM的，鼠标没有滑过的字形就是未找到<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/62b3ef20-8838-4228-a4aa-3ccae7af8c72" alt="image"><br>简单，给全部字形节点加mouseover事件，手动触发，再获取全部Unicode就正常了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#glyph-list-end&#x27;</span>).<span class="hljs-property">children</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> event = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseEvent</span>(<span class="hljs-string">&#x27;mouseover&#x27;</span>);<br>  item.<span class="hljs-title function_">dispatchEvent</span>(event);<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/747cc3db-a27f-40f3-873e-8e777b95df66" alt="image"></p><h2 id="获取Unicode和字形的映射，创建密码表"><a href="#获取Unicode和字形的映射，创建密码表" class="headerlink" title="获取Unicode和字形的映射，创建密码表"></a>获取Unicode和字形的映射，创建密码表</h2><p>没办法，这里只能手动建立映射了，或者有OCR接口的话可以优化一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> unicodeArr = [<span class="hljs-string">&quot;none&quot;</span>,<span class="hljs-string">&quot;BFEE&quot;</span>,<span class="hljs-string">&quot;B460&quot;</span>,<span class="hljs-string">&quot;BA67&quot;</span>...]<br><span class="hljs-keyword">var</span> decryptArr = [<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>...]<br><span class="hljs-keyword">var</span> unicodeMap = &#123;&#125;<br>unicodeArr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  unicodeMap[item] = decryptArr[index]<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(unicodeMap)<br></code></pre></td></tr></table></figure><p>映射结果如下<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/d471864a-d53f-4052-ae19-2897f9bcd6bb" alt="image"></p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>复制一句密文来测试下效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> encryptStr = <span class="hljs-string">&#x27;욜춼헵풱쐋뒈킧젋쉍쯃总쉫욜춼헵풱칌，以(      )为宗旨。&#x27;</span><br><span class="hljs-keyword">var</span> decryptSte = encryptStr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HEX</span> = item.<span class="hljs-title function_">charCodeAt</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toUpperCase</span>()<br>    <span class="hljs-keyword">return</span> unicodeMap[<span class="hljs-variable constant_">HEX</span>] || item<br>  &#125;)<br>  .<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;encryptStr&#x27;</span>, encryptStr)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;decryptSte&#x27;</span>, decryptSte)<br></code></pre></td></tr></table></figure><p>解密效果如下<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/eeddd7e1-6d6f-4f4d-aaf4-a9a6bee733f7" alt="image"><br>看起来解密效果还可以，一部分字体没有解密出来是因为字体文件的问题，多个Unicode对应同一个字体文件TTGlyph，用上面说的百度字体编辑器可以看到 <strong>国</strong> 这个字形文件有两个Unicode，把这些特殊Unicode手动加到之前的密码表就好了<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/7e795ae6-fb06-415c-bfe5-2eacc5117642" alt="image"></p><h1 id="JSON数据解密"><a href="#JSON数据解密" class="headerlink" title="JSON数据解密"></a>JSON数据解密</h1><h2 id="确认接口"><a href="#确认接口" class="headerlink" title="确认接口"></a>确认接口</h2><p>这些加密字体很明显是后端接口传过来的，但是这个分页接口返回的竟然是加密后的字符串，真有你的<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/6f04b6d7-f7cf-466d-9eb6-125b1feaa2ab" alt="image"></p><h2 id="定位代码"><a href="#定位代码" class="headerlink" title="定位代码"></a>定位代码</h2><p>在返回的js文件内搜索这个接口地址 2023gjaqzsjs.haedu.cn 和 &#x2F;json&#x2F;，找到相关代码，看到返回的加密字符串被$decrypt方法解密<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/4c23698e-da90-4e69-abc8-1eb1b1351c88" alt="image"></p><p>搜索$decrypt方法发现是用AES解密<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/01a7fce6-d1a0-46c1-a4f8-518ed9c5bcbc" alt="image"></p><p>通过其他的一些变量名我猜用的很可能是<strong>crypto-js</strong>这个库，但是看crypto-js源码的decrypt函数第三个参数是一个配置对象啊，这里怎么是个字符串，难道是用的其他解密库？我在这里卡了半天，打断点才发现是作者创建了一个AES对象，把crypto-js的decrypt又封装了一下</p><p>这里的o方法就是把16进制转为10进制index，然后获取t[index], 比如r[“AES”][o(“0xa”)]实际就是r[“AES”][“decrypt”]</p><p><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/41319712-5058-456f-a54a-095c55be2e4c" alt="image"></p><p>引入crypto-js的cdn文件，然后复制相关解密变量到本地测试<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/f75438b8-8e9c-4a8a-a321-d376ab2f68f0" alt="image"></p><p>结果如下<br><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/970c662f-fbb8-4882-b05e-babb6140a4f6" alt="image"></p><p><img src="https://github.com/XueMeijing/dingtalk-chatgpt-node/assets/35559153/3d8c92c6-07ca-46e0-82b0-d1d2fcf0fccb" alt="image"></p><p>和知识竞赛题目内的加密字体一样，JSON解密完成</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习了字体加密解密的一些知识，加深了对字体文件的理解。而且在我以往的印象里反爬虫就是ip限制，请求频率限制，没想到还有JSON加密和字体加密。但是目前还有个问题：后端怎么生成的加密字体文件和字体JSON，通过密码表还是加密规则，这个字体文件只加密了一部分常用字</p>]]></content>
    
    
    <categories>
      
      <category>有趣</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>github时光机：修改提交历史到1970年</title>
    <link href="/2023/04/09/2023-04-09-change-your-github-contribution-history-to-1969/"/>
    <url>/2023/04/09/2023-04-09-change-your-github-contribution-history-to-1969/</url>
    
    <content type="html"><![CDATA[<p>在我还没有毕业的时候，我就听说过这样一个关于程序员的段子，某公司想招一个30岁以下，拥有20年工作经验的人。从现在起这不是段子了，只需简单几步，你可以修改你的github提交记录到1970年，成为一个20岁就拥有50年开发经验的老鸟。</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><strong>注意：以下截图全部为 github 链接，不使用 VPN 大概率出现图片加载失败的问题</strong></p><p>可以打开 <a href="https://github.com/XueMeijing">https://github.com/XueMeijing</a> 在线体验 (PC端)</p><p><img src="https://user-images.githubusercontent.com/35559153/230755702-f35bd2ff-5411-4463-a7cc-b2e711a4aae9.png" alt="image"></p><h2 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h2><p>注意：不确定是否能回滚到正常状态</p><ol><li><p>创建一个新的名叫1969的仓库 <a href="https://github.com/new">https://github.com/new</a><br><img src="https://user-images.githubusercontent.com/35559153/230755895-00b7138c-d2e3-4c7c-83fa-6cd570328415.png" alt="image"></p></li><li><p>本地创建一个 index.sh 文件，复制 <a href="https://github.com/XueMeijing/1969-script/blob/master/index.sh">https://github.com/XueMeijing/1969-script/blob/master/index.sh</a> 内容到本地 index.sh</p></li><li><p>执行shell</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh index.sh<br></code></pre></td></tr></table></figure></li><li><p>输入 2 选择 ssh 模式（如果你本地已经配置了ssh登录）</p></li><li><p>复制创建的 1969 仓库的 git 链接 然后回车进行下一步<br><img src="https://user-images.githubusercontent.com/35559153/230756155-9fa663e0-f9cf-4e8c-9dce-6c3376bd11d5.png" alt="image"><br><img src="https://user-images.githubusercontent.com/35559153/230756186-0bbb9b3f-3eed-41e9-a8af-e430243efff2.png" alt="image"></p></li><li><p>输入文字或者直接回车进行下一步，输入的文字会出现在 README.md 里</p></li><li><p>刷新仓库页面，看是否提交成功，如果报错可以翻到下面的常见问题看是否能解决<br><img src="https://user-images.githubusercontent.com/35559153/230756281-2b84532d-b89c-47ee-b643-96197a6deeb4.png" alt="image"></p></li><li><p>回到个人资料页，刷新页面看提交历史的年份是否改变</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>执行 shell 失败，报错 badDateOverflow: invalid author&#x2F;committer line - date causes integer overflow</li></ol><ul><li>index.sh 设置的年份要大于等于1970年</li><li>等于1970年的时候，跟所在时区有关，比如北京时区为+0800，设置 index.sh 的 GIT_AUTHOR_DATE 和 GIT_COMMITTER_DATE 为 “${YEAR}-01-01T08:00:00”</li></ul><ol start="2"><li>提交成功，但是个人资料页时间轴没改变</li></ol><ul><li>我的问题是本地 git 配置的邮箱，和 github 的邮箱不是同一个，需要在 github 设置-&gt; 邮箱中加上本地的邮箱</li><li>可能没到 24 小时</li><li>更多信息请看 <a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/managing-contribution-settings-on-your-profile/why-are-my-contributions-not-showing-up-on-my-profile">Common reasons that contributions are not counted</a></li></ul><ol start="3"><li>时间轴改变到1969年，但是上下滚动的时候有错位异常</li></ol><ul><li>选择 Select Activity overview 模式，滚动就正常了<br><img src="https://user-images.githubusercontent.com/35559153/230754120-e5687f95-b3f7-48ca-aa2b-94601e2dac31.png" alt="image"></li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>git 的每次提交有两个时间，分别为 AuthorDate 和 CommitDate ，在一些情况下他们是不一致的，比如使用 git cherry-pick 、 git commit –amend 或者 git commit –date 1970-01-01T08:00:00 后, 再使用 git log –pretty&#x3D;fuller 可以查看每次提交 AuthorDate 和 CommitDate 的区别。</p><p><img src="https://user-images.githubusercontent.com/35559153/230784864-b6db0d2d-74f3-43ee-8275-725a2ce7d16b.png" alt="image"></p><p>你也可以每次提交手动设置提交时间 ( –date 修改的是 AuthorDate )，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&#x27;add something&#x27;</span> --<span class="hljs-built_in">date</span> 1970-01-01T08:00:00<br></code></pre></td></tr></table></figure><p>得到如下结果，因为时区的原因，设置的时间是 1970 ，但是显示的是 1969 年<br><img src="https://user-images.githubusercontent.com/35559153/230786020-e851c6be-e243-4eff-8eb6-288bd2d6cdce.png" alt="image"><br><img src="https://user-images.githubusercontent.com/35559153/230786452-a2591574-91fa-4012-8153-fe349af376cc.png" alt="image"></p><p>对于 github 来说，个人资料页的时间轴使用的是 AuthorDate ，仓库内使用的是 CommitDate ，这也是为什么能把 github 提交历史修改到 1970 年的原因，更多信息可以查看 github <a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/managing-contribution-settings-on-your-profile/troubleshooting-commits-on-your-timeline">官方文档</a></p><p>通过修改提交时间还可以进行其他有趣的玩法，比如下面两个</p><h3 id="生成随机贡献-https-github-com-Shpota-github-activity-generator"><a href="#生成随机贡献-https-github-com-Shpota-github-activity-generator" class="headerlink" title="生成随机贡献 https://github.com/Shpota/github-activity-generator"></a>生成随机贡献 <a href="https://github.com/Shpota/github-activity-generator">https://github.com/Shpota/github-activity-generator</a></h3><p><img src="https://user-images.githubusercontent.com/35559153/230758005-29ee8376-ea3c-4d75-b73b-ec419ab3946a.png" alt="image"></p><h3 id="自己设置未来炫酷的贡献-https-github-com-empdo-art"><a href="#自己设置未来炫酷的贡献-https-github-com-empdo-art" class="headerlink" title="自己设置未来炫酷的贡献 https://github.com/empdo/art"></a>自己设置未来炫酷的贡献 <a href="https://github.com/empdo/art">https://github.com/empdo/art</a></h3><p><img src="https://user-images.githubusercontent.com/35559153/230758057-c0d8e862-1bca-4503-bee3-61f63fe69776.png" alt="image"></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>俺有个习惯，划水没事的时候就喜欢点开别人的 github 资料页看，看到这位大神 <a href="https://github.com/antfu">antfu</a> 的时候惊了，她的贡献记录竟然到 1990 年，俺就搜了下发现她写的库 <a href="https://github.com/antfu/1990-script">https://github.com/antfu/1990-script</a> , 但是 issues 里和 stars 只有极少数人修改成功了，最近修改成功的一位在今年 1 月。有个哥们还提了一个pr，这哥们更牛逼直接冲到了1969年😅 所以其他人失败可能并不是因为 github 修复了这个问题，经过查文档和调试后发现，我的问题是 github 邮箱里没有保存本地 git 设置的邮箱，添加后就正常了。如果你按照教程修改成功了，欢迎点个star~ <a href="https://github.com/XueMeijing/1969-script">https://github.com/XueMeijing/1969-script</a></p>]]></content>
    
    
    <categories>
      
      <category>有趣</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>耗时一周，我统计出来了npm下载量前30的仓库，第一竟是它！</title>
    <link href="/2023/03/18/2023-03-18-npm-downloads-ranking/"/>
    <url>/2023/03/18/2023-03-18-npm-downloads-ranking/</url>
    
    <content type="html"><![CDATA[<p>作为一个前端开发人员，我们每天都在使用npm，但是你曾经是否和我一样好奇，下载量最大的包是哪个？每天下载多少次？他们的github star是多少？上周我偶然看到了一个库 <a href="https://www.npmjs.com/package/glob">glob</a>， 每周竟然下载8000万次，与此同时，react只有1500万次，glob是最高的吗，第一又是谁呢？</p><h1 id="统计结果展示"><a href="#统计结果展示" class="headerlink" title="统计结果展示"></a>统计结果展示</h1><p>耗时一周，我统计出来了npm下载量前30的仓库，第一竟是它！supports-color！总下载量 26,108,633,482 次，但 github star 竟然只有 319 个。另外，我做了一个网站，统计了最近一周、最近一月、最近一年、总下载量等各个维度的图表，还没有做优化加载可能有点慢，网站地址 <a href="https://www.npmrank.net/">https://www.npmrank.net/</a></p><p>无图无真相，下面是网站截图<br><img src="https://user-images.githubusercontent.com/35559153/226155971-98090186-88e2-4e45-a483-c66c4409e693.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/35559153/226156027-c2c17c56-f661-41d2-969c-699cf17441d7.png" alt="image"></p><h1 id="分析npm官网接口，获取某个包的下载量"><a href="#分析npm官网接口，获取某个包的下载量" class="headerlink" title="分析npm官网接口，获取某个包的下载量"></a>分析npm官网接口，获取某个包的下载量</h1><p>打开浏览器控制台分析npm接口发现，同一个地址，比如 <a href="https://www.npmjs.com/package/lodash">https://www.npmjs.com/package/lodash</a> ， 从npm首页 Popular libraries 中推荐的库点进去，接口返回的是JSON格式的数据，而从地址栏输入链接进去，返回是服务端渲染好的html。多次控制变量法未能定位是哪个header的原因，我就先不管了（当然不是睡大觉）</p><ol><li>找到返回JSON的接口，copy -&gt; copy as fetch<br><img src="https://user-images.githubusercontent.com/35559153/226098795-aa0de0d3-bbbd-4357-ba5c-acf319b022e5.png" alt="image"></li><li>粘贴到console<br><img src="https://user-images.githubusercontent.com/35559153/226098836-f9629ddc-85f1-44f9-8410-79b6b8a4a0e2.png" alt="image"></li><li>复制header到postman，同时看到有下载量数据<br><img src="https://user-images.githubusercontent.com/35559153/226099349-3b354dbe-c606-40f3-8338-59f4377235e0.png" alt="image"></li><li>打开postman右侧的代码块，找到python代码<br><img src="https://user-images.githubusercontent.com/35559153/226099040-113c03f4-eb54-415a-950c-859070afc99d.png" alt="image"></li><li>复制到test.py，去掉某些空的header<br><img src="https://user-images.githubusercontent.com/35559153/226099169-c1f835e6-8fc6-4635-a426-d2a9725b2e5e.png" alt="image"></li></ol><p>OK，这样获取某一个仓库的接口就完成了，通过这个接口我们可以拿到github地址，仓库版本，最近一年每周的下载量等</p><h1 id="根据npm官方api，获取不同时间段的下载量"><a href="#根据npm官方api，获取不同时间段的下载量" class="headerlink" title="根据npm官方api，获取不同时间段的下载量"></a>根据npm官方api，获取不同时间段的下载量</h1><p>上面官网的接口只是最近一年各周的下载量，有没有其他时间段的呢，找了一圈后发现npm官网提供了这样的接口，<a href="https://github.com/npm/registry/blob/master/docs/download-counts.md">官方api文档</a> ，<br><img src="https://user-images.githubusercontent.com/35559153/226100591-6d6fce11-077f-405c-8ca9-9b415f6eeb96.png" alt="image"><br>通过上面提供的接口，我们可以获取上周、上月、任何一个时间段的下载量，但是需要注意的是，官方api每次最多返回18个月的数据，最早是2015-01-10号的数据，所以统计总下载量时要分段获取每年的下载量后再累加，如果你想统计自己的包被安装了多少次，也是可以滴，接下来就是获取很多包名，循环下载后统计了</p><h1 id="获取19年的排行"><a href="#获取19年的排行" class="headerlink" title="获取19年的排行"></a>获取19年的排行</h1><p>我在网上搜了一下npm download rank，发现只有 <a href="https://gist.github.com/anvaka/8e8fa57c7ee1350e3491">anvaka</a> 19年做的统计符合想要的结果，他下载了npm全部的包并做了各种维度的分析，这个md是他统计的 top 1000依赖的包，不过被依赖的越多下载量越大，误差应该不会很大<br><img src="https://user-images.githubusercontent.com/35559153/226099718-5328c7de-d60e-4b83-ba57-348106bc99e0.png" alt="image"></p><ol><li><p>保存文件到本地 SOURCE_FILE</p></li><li><p>获取包名和仓库地址并存到sqlite数据库</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">从md中拿到库名并存到数据库</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(SOURCE_FILE, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>  lines = f.readlines()<br>  <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    name = re.findall(<span class="hljs-string">r&#x27;\[(.*?)\]&#x27;</span>, line)<br>    href = re.findall(<span class="hljs-string">r&#x27;\((.*?)\)&#x27;</span>, line)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;line\n&#x27;</span>, line)<br>    <span class="hljs-keyword">if</span> name <span class="hljs-keyword">and</span> href:<br>      get_pkgbase_query = <span class="hljs-string">&#x27;&#x27;&#x27;SELECT * FROM pkgbase WHERE id = ?&#x27;&#x27;&#x27;</span><br>      record_base = sql_obj.get(get_pkgbase_query, (name[<span class="hljs-number">0</span>],), one=<span class="hljs-literal">True</span>)<br>      <span class="hljs-keyword">if</span> record_base <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        insert_data_query = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                            INSERT INTO pkgbase</span><br><span class="hljs-string">                            (&#x27;id&#x27;, &#x27;npm_url&#x27;, &#x27;github_url&#x27;, &#x27;homepage_url&#x27;, &#x27;version&#x27;, &#x27;license&#x27;, &#x27;github_star&#x27;, &#x27;size&#x27;, created, updated)</span><br><span class="hljs-string">                            VALUES(?,?,?,?,?,?,?,?,?,?)</span><br><span class="hljs-string">                            &#x27;&#x27;&#x27;</span><br>        sql_obj.update(insert_data_query, (name[<span class="hljs-number">0</span>], NPM_BASE_URL + name[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p> <img src="https://user-images.githubusercontent.com/35559153/226101055-90ffb9e0-65df-4395-b2b0-17359b1ef1a1.png" alt="image"></p></li><li><p>循环请求存储基本数据</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">更新下载量</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>  all_data_query = <span class="hljs-string">&#x27;&#x27;&#x27;SELECT * FROM pkgbase&#x27;&#x27;&#x27;</span><br>  records = sql_obj.get(all_data_query)<br>  <span class="hljs-keyword">for</span> index, record <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(records):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;id&#x27;</span>, record[<span class="hljs-string">&#x27;id&#x27;</span>], index)<br>      <span class="hljs-keyword">try</span>:<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        获取下载量并写入数据库</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        href = NPM_BASE_URL + record[<span class="hljs-string">&#x27;id&#x27;</span>]<br>        npm_response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, href, headers=npm_headers)<br>        npm_data = npm_response.json()<br><br>        <span class="hljs-comment"># pkgbase</span><br>        github_url = npm_data[<span class="hljs-string">&#x27;packageVersion&#x27;</span>].get(<span class="hljs-string">&#x27;repository&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        homepage_url = npm_data[<span class="hljs-string">&#x27;packageVersion&#x27;</span>].get(<span class="hljs-string">&#x27;homepage&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        version = npm_data[<span class="hljs-string">&#x27;packument&#x27;</span>].get(<span class="hljs-string">&#x27;version&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        license = npm_data[<span class="hljs-string">&#x27;packument&#x27;</span>].get(<span class="hljs-string">&#x27;license&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-comment"># 有仓库两个license</span><br>        license = license <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(license) == <span class="hljs-built_in">str</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;-&#x27;</span><br>        versions = npm_data[<span class="hljs-string">&#x27;packument&#x27;</span>].get(<span class="hljs-string">&#x27;versions&#x27;</span>) <span class="hljs-keyword">if</span> npm_data[<span class="hljs-string">&#x27;packument&#x27;</span>].get(<span class="hljs-string">&#x27;versions&#x27;</span>) <span class="hljs-keyword">else</span> []<br>        updated = datetime.datetime.fromtimestamp(versions[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;date&#x27;</span>][<span class="hljs-string">&#x27;ts&#x27;</span>] / <span class="hljs-number">1000</span>).strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>        created = datetime.datetime.fromtimestamp(versions[<span class="hljs-built_in">len</span>(versions) - <span class="hljs-number">1</span>][<span class="hljs-string">&#x27;date&#x27;</span>][<span class="hljs-string">&#x27;ts&#x27;</span>] / <span class="hljs-number">1000</span>).strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br><br>        update_pkgbase_query =  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                                UPDATE pkgbase</span><br><span class="hljs-string">                                SET github_url = ?, homepage_url = ?, version = ?, license = ?, updated = ?, created = ?</span><br><span class="hljs-string">                                WHERE id = ?</span><br><span class="hljs-string">                                &#x27;&#x27;&#x27;</span><br>        sql_obj.update(update_pkgbase_query, (github_url, homepage_url, version, license, updated, created, record[<span class="hljs-string">&#x27;id&#x27;</span>]))<br></code></pre></td></tr></table></figure></li><li><p>更新各个时间段的下载量</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取某一时期的下载量</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_point_downloads</span>(<span class="hljs-params">date_range, package_name</span>):<br>  href = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;NPM_BASE_API_POINT_URL&#125;</span><span class="hljs-subst">&#123;date_range&#125;</span>/<span class="hljs-subst">&#123;package_name&#125;</span>&#x27;</span><br>  response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, href)<br>  data = response.json()<br>  <span class="hljs-keyword">return</span> data[<span class="hljs-string">&#x27;downloads&#x27;</span>]<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取全部下载量，npm每次最多返回18个月的数据，所以分段下载后再累加</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_point_all_downloads</span>(<span class="hljs-params">package_name</span>):<br>  start_time = <span class="hljs-number">2015</span><br>  end_time = datetime.datetime.now().year<br>  all_downloads = <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">for</span> year <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start_time, end_time + <span class="hljs-number">1</span>):<br>    dltype = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;year&#125;</span>&#x27;</span><br>    date_range = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;year&#125;</span>-01-01:<span class="hljs-subst">&#123;year + <span class="hljs-number">1</span>&#125;</span>-01-01&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;date_range&#x27;</span>, date_range)<br><br>    downloads = get_point_downloads(date_range, package_name)<br>    all_downloads += downloads<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;new downloads&#x27;</span>,downloads)<br>    add_data_query = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                    INSERT INTO pkgdownload</span><br><span class="hljs-string">                    (&#x27;id&#x27;, &#x27;dltype&#x27;, &#x27;downloads&#x27;, &#x27;timepoint&#x27;)</span><br><span class="hljs-string">                    VALUES(?,?,?,?)</span><br><span class="hljs-string">                    &#x27;&#x27;&#x27;</span><br>    sql_obj.update(add_data_query, (package_name, dltype, downloads, datetime.datetime.now()))<br><span class="hljs-keyword">return</span> all_downloads<br><br>...<br><br><span class="hljs-comment"># pkgdownload</span><br>base_dltype = [<span class="hljs-string">&#x27;last-day&#x27;</span>, <span class="hljs-string">&#x27;last-week&#x27;</span>, <span class="hljs-string">&#x27;last-month&#x27;</span>, <span class="hljs-string">&#x27;last-year&#x27;</span>, <span class="hljs-string">&#x27;all-time&#x27;</span>]<br><span class="hljs-keyword">for</span> dltype <span class="hljs-keyword">in</span> base_dltype:<br>  <span class="hljs-keyword">if</span> dltype == <span class="hljs-string">&#x27;all-time&#x27;</span>:<br>    downloads = get_point_all_downloads(record[<span class="hljs-string">&#x27;id&#x27;</span>])<br>  <span class="hljs-keyword">else</span>:<br>    downloads = get_point_downloads(dltype, record[<span class="hljs-string">&#x27;id&#x27;</span>])<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dltype&#x27;</span>, dltype)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;downloads&#x27;</span>, downloads)<br>  replaced_dltype = re.sub(<span class="hljs-string">r&#x27;\-&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, dltype)<br>  add_pkgdownload_query =  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                            INSERT INTO pkgdownload</span><br><span class="hljs-string">                            (&#x27;id&#x27;, &#x27;dltype&#x27;, &#x27;downloads&#x27;, &#x27;timepoint&#x27;)</span><br><span class="hljs-string">                            VALUES(?,?,?,?)</span><br><span class="hljs-string">                            &#x27;&#x27;&#x27;</span><br>  sql_obj.update(add_pkgdownload_query, (record[<span class="hljs-string">&#x27;id&#x27;</span>], replaced_dltype, downloads, datetime.datetime.now()))<br></code></pre></td></tr></table></figure></li></ol><h1 id="获取包的github数据"><a href="#获取包的github数据" class="headerlink" title="获取包的github数据"></a>获取包的github数据</h1><p>本来官网接口中返回的有ghapi字段，如 <a href="https://api.github.com/repos/lodash/lodash">https://api.github.com/repos/lodash/lodash</a> ，里面有stargazers_count字段就是star数，但是该接口每小时限速60次，所以无奈只能用爬虫了，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_github_info</span>(<span class="hljs-params">github_url, package_name</span>):<br>  response = requests.get(github_url, headers=github_headers)<br>  soup = BeautifulSoup(response.content, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>  star = soup.find(<span class="hljs-string">&quot;span&quot;</span>, class_=<span class="hljs-string">&#x27;text-bold&#x27;</span>).get_text() <span class="hljs-keyword">if</span> soup.find(<span class="hljs-string">&quot;span&quot;</span>, class_=<span class="hljs-string">&#x27;text-bold&#x27;</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>  update_pkgbase_query =  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                            UPDATE pkgbase</span><br><span class="hljs-string">                            SET github_star = ?</span><br><span class="hljs-string">                            WHERE id = ?</span><br><span class="hljs-string">                            &#x27;&#x27;&#x27;</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;package_name star&#x27;</span>, package_name, star)<br>  sql_obj.update(update_pkgbase_query, (star, package_name))<br></code></pre></td></tr></table></figure><p>第一次使用爬虫库 bs4 的 BeautifulSoup 模块，获取 github star 只有两行代码，也太方便了吧</p><p>就在刚才发现npm也有接口会返回github star数，如 <a href="https://api.github.com/repos/lodash/lodash/pulls?per_page=1">https://api.github.com/repos/lodash/lodash/pulls?per_page=1</a> 里的 stargazers_count ，等有时间我替换一下</p><h1 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h1><p>经过上面一通操作，我们现在有了pkgbase、pkgdownload 这样两张表，内容如下<br><img src="https://user-images.githubusercontent.com/35559153/226102072-71e4b038-c492-4775-a8f8-768a70d9865d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/35559153/226102110-a6c1477a-9023-44c7-93d5-e22615c26f3c.png" alt="image"></p><p>接下来写两个接口，一个是返回下载量排名的的类型，过去一周，过去一年，总下载量等，供前端筛选，使用quart简单起个服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> quart <span class="hljs-keyword">import</span> Quart, request<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">from</span> db <span class="hljs-keyword">import</span> SQLDB<br><br>app = Quart(__name__)<br>sql_obj = SQLDB()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取排名类型</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/ranking/types&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_types</span>():<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-string">&#x27;data&#x27;</span>: get_rank_types(),<br>    <span class="hljs-string">&#x27;success&#x27;</span>: <span class="hljs-literal">True</span><br>  &#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_rank_types</span>():<br>  get_types_query = <span class="hljs-string">&#x27;SELECT DISTINCT dltype FROM pkgdownload&#x27;</span><br>  records = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(convert_type, sql_obj.get(get_types_query)))<br>  <br>  <span class="hljs-keyword">return</span> records<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_type</span>(<span class="hljs-params">record</span>):<br>    dltype = re.sub(<span class="hljs-string">r&#x27;\_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, record[<span class="hljs-string">&#x27;dltype&#x27;</span>])<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-string">&#x27;label&#x27;</span>: dltype,<br>      <span class="hljs-string">&#x27;value&#x27;</span>: dltype<br>    &#125;<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">8080</span>)<br></code></pre></td></tr></table></figure><p>根据排名类型，返回对应的排行数据<br><img src="https://user-images.githubusercontent.com/35559153/226156536-7d15446d-13cd-4a25-b166-ff74d4716357.png" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取包的数据</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/ranking/packages/&lt;path:rank_type&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_packages</span>(<span class="hljs-params">rank_type</span>):<br>  top = request.args.get(<span class="hljs-string">&#x27;top&#x27;</span>)<br>  <span class="hljs-keyword">if</span> top <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    top = <span class="hljs-number">30</span><br>  <span class="hljs-keyword">elif</span> <span class="hljs-built_in">int</span>(top) &gt; <span class="hljs-number">200</span>:<br>    top = <span class="hljs-number">200</span><br>  <span class="hljs-keyword">else</span>:<br>    top = <span class="hljs-built_in">int</span>(top)<br>  rank_types = get_rank_types()<br>  rank_type =  <span class="hljs-built_in">next</span>((c[<span class="hljs-string">&#x27;value&#x27;</span>] <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> rank_types <span class="hljs-keyword">if</span> c[<span class="hljs-string">&#x27;value&#x27;</span>] == rank_type), <span class="hljs-literal">None</span>)<br><br>  <span class="hljs-keyword">if</span> rank_type:<br>    rank_type = re.sub(<span class="hljs-string">r&#x27;\-&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, rank_type)<br>    get_data_query =  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                      SELECT</span><br><span class="hljs-string">                        a.id,</span><br><span class="hljs-string">                        npm_url npmUrl,</span><br><span class="hljs-string">                        github_url githubUrl,</span><br><span class="hljs-string">                        homepage_url homepageUrl,</span><br><span class="hljs-string">                        dltype dltype,</span><br><span class="hljs-string">                        downloads downloads,</span><br><span class="hljs-string">                        github_star githubStar,</span><br><span class="hljs-string">                        version,</span><br><span class="hljs-string">                        license,</span><br><span class="hljs-string">                        updated,</span><br><span class="hljs-string">                        created </span><br><span class="hljs-string">                      FROM</span><br><span class="hljs-string">                        ( SELECT id, dltype, downloads FROM pkgdownload WHERE dltype = ? ORDER BY downloads DESC LIMIT 0, ? ) a,</span><br><span class="hljs-string">                        pkgbase b</span><br><span class="hljs-string">                      WHERE</span><br><span class="hljs-string">                        a.id = b.id </span><br><span class="hljs-string">                      &#x27;&#x27;&#x27;</span><br>    records = sql_obj.get(get_data_query, (rank_type, top))<br><br>    <span class="hljs-keyword">for</span> index, record <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(records):<br>      records[index][<span class="hljs-string">&#x27;rank&#x27;</span>] = index + <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-string">&#x27;data&#x27;</span>: records,<br>      <span class="hljs-string">&#x27;success&#x27;</span>: <span class="hljs-literal">True</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/35559153/226156582-af006bf7-d0df-454e-bce9-8cafdc6052be.png" alt="image"></p><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>如果你看了上面开启服务的的代码，你可能会发现获取排行数据的接口其实还有一个top参数，最大是200条，但是由于图表不方便展示这么多的数据，如果你想自己看一下前200都有哪些包，可以复制接口改一下，如 <a href="https://www.npmrank.net/api/ranking/packages/last-day?top=200">https://www.npmrank.net/api/ranking/packages/last-day?top=200</a> ，如果你想查看超过200的排行，可以打开database.db的pkgdownload表查看</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>以上就是获取npm排行的整个流程了，如果感觉有意思的话欢迎点个赞或者star，后端仓库地址 <a href="https://github.com/XueMeijing/npmrank">npmrank</a> ，在线体验网页链接 <a href="https://www.npmrank.net/">https://www.npmrank.net/</a></p>]]></content>
    
    
    <categories>
      
      <category>有趣</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>创建python版本的chatGPT钉钉机器人</title>
    <link href="/2023/03/12/2023-03-12-create-dingtalk-chatgpt-robot-with-python/"/>
    <url>/2023/03/12/2023-03-12-create-dingtalk-chatgpt-robot-with-python/</url>
    
    <content type="html"><![CDATA[<p>什么年代了还在用传统划水网站？来试试这款chatGPT钉钉机器人吧。chatGPT已经火了几个月了，github上面各种GPT插件和机器人🤖️也是层出不穷，俺随大流也做了一个python版本的钉钉机器人，最近感觉服务差不多稳定了，所以在这里分享给大家</p><h1 id="★目录"><a href="#★目录" class="headerlink" title="★目录"></a>★目录</h1><p><a href="#head-1">★前提</a><br><a href="#head-2">★效果展示</a><br><a href="#head-3">★创建钉钉机器人</a><br><a href="#head-4">★加入chatGPT</a><br><a href="#head-5">★结束</a></p><p><a id="head-1"></a></p><h1 id="★前提"><a href="#★前提" class="headerlink" title="★前提"></a>★前提</h1><ol><li>有钉钉管理员权限，没有的话自己建一个测试公司拉小伙伴进来一起划水</li><li>有服务器，python3.9以上的环境或者使用docker</li><li>有chatGPT的session</li><li>有一些python和服务器的基础知识</li></ol><p>俗话说巧妇难为无米之炊，钉钉管理员、服务器、chatGPT的session这三个是必须滴，如果不了解python的话，也可以用下面提到的nodejs或者.NET库</p><p><a id="head-2"></a></p><h1 id="★效果展示"><a href="#★效果展示" class="headerlink" title="★效果展示"></a>★效果展示</h1><p>如果你已经满足了上面的条件，想立即体验的话可以直接克隆到服务器 <a href="https://github.com/XueMeijing/dingtalk-chatgpt-bot">dingtalk-chatgpt-bot</a> ，修改config.js配置后就可以使用了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2eb627ae7f244cb933b153021d1c684~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><a id="head-3"></a></p><h1 id="★创建钉钉机器人"><a href="#★创建钉钉机器人" class="headerlink" title="★创建钉钉机器人"></a>★创建钉钉机器人</h1><h2 id="◇什么是钉钉机器人"><a href="#◇什么是钉钉机器人" class="headerlink" title="◇什么是钉钉机器人"></a>◇什么是钉钉机器人</h2><p><a href="https://open.dingtalk.com/document/orgapp/robot-overview">官方文档</a> 说：在钉钉，机器人是独立存在的一个应用类型，可以开箱即用，也可以进行二次开发，无需和微应用或者群等场景进行强制绑定。<br>官方说的有点绕，在俺的理解中，钉钉机器人就是一个代理服务，可以把你的消息转发给第三方，也可以从第三方再由机器人转发回来。机器人通常用来做消息推送或者资料查询<br>我当时是跟着 <a href="https://xie.infoq.cn/article/0d31f8da82b3191a993e50054">老表</a> 的教程来的，改了一部分东西</p><h2 id="◇创建机器人"><a href="#◇创建机器人" class="headerlink" title="◇创建机器人"></a>◇创建机器人</h2><ol><li>创建公司<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8e149c78b164bb6b89f397001918146~tplv-k3u1fbpfcp-watermark.image" alt="image.png"> </li><li>登录开发者后台，按照如下图示顺序创建应用，提示选择新版和旧版的话选择旧版，注意应用名不能有chatGPT<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfaf47cafebc400cb015114a100acdf8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li>更改配置，这时候保存不了，ip对应的服务还没有启动，我们等下面服务启动之后再来进行这个<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a85d15a112b848bbb32bf3cd45e5dda8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li>点击调试，会创建测试群，测试通过之后上线<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0e4bd1fb05548bf99cdd0791c022d6d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li>在群聊里找到智能群助手，添加机器人，然后@机器人就可以进行玩耍了</li></ol><h2 id="◇开启服务"><a href="#◇开启服务" class="headerlink" title="◇开启服务"></a>◇开启服务</h2><ol><li>安装quart（类似flask，不过可以进行异步处理）  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> quart<br></code></pre></td></tr></table></figure></li><li>创建index.py，写入如下代码  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> quart <span class="hljs-keyword">import</span> Quart<br><br>app = Quart(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello world&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">8083</span>)<br></code></pre></td></tr></table></figure></li><li>开启服务，打开 <a href="http://127.0.0.1:8083/">http://127.0.0.1:8083/</a> 就能看到熟悉的hello world了，很简单对吧？  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> <span class="hljs-built_in">index</span>.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure>  <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c78985b4e164afa9612f842a8770b1a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li>需要注意的是，127.0.0.1是本地开发调试用的，如果部署到服务器，需要改成0.0.0.0端口，并开启网络防火墙，这部分我也不多说了，需要的这看 <a href="https://xie.infoq.cn/article/3340770024c49b5b1a54597d5">老表</a> 的原文吧</li><li>全部代码如下, 更改<code>app_secret</code>为机器人应用信息里的app_secret  <details>  <summary>展开查看完整代码</summary>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> quart <span class="hljs-keyword">import</span> Quart, request<br><br>app = Quart(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>    <span class="hljs-comment"># 第一步验证：是否是post请求</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 签名验证 获取headers中的Timestamp和Sign</span><br>            req_data = <span class="hljs-keyword">await</span> request.get_json()<br>            timestamp = request.headers.get(<span class="hljs-string">&#x27;Timestamp&#x27;</span>)<br>            sign = request.headers.get(<span class="hljs-string">&#x27;Sign&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;request.data-----\n&#x27;</span>, req_data)<br>            <span class="hljs-comment"># 第二步验证：签名是否有效</span><br>            <span class="hljs-keyword">if</span> check_sig(timestamp) == sign:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;签名验证成功-----&#x27;</span>)<br>                <span class="hljs-comment"># 调用数据处理函数</span><br>                <span class="hljs-keyword">await</span> handle_info(req_data)<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(req_data)<br>            <span class="hljs-keyword">else</span>:<br>                result = <span class="hljs-string">&#x27;签名验证失败-----&#x27;</span><br>                <span class="hljs-built_in">print</span>(result)<br>                <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            result = <span class="hljs-string">&#x27;出错啦～～&#x27;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(result)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;钉钉机器人:&#x27;</span> + <span class="hljs-built_in">str</span>(datetime.datetime.now())<br><br><span class="hljs-comment"># 处理自动回复消息</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_info</span>(<span class="hljs-params">req_data</span>):<br>    <span class="hljs-comment"># 解析用户发送消息 通讯webhook_url </span><br>    text_info = req_data[<span class="hljs-string">&#x27;text&#x27;</span>][<span class="hljs-string">&#x27;content&#x27;</span>].strip()<br>    webhook_url = req_data[<span class="hljs-string">&#x27;sessionWebhook&#x27;</span>]<br>    senderid = req_data[<span class="hljs-string">&#x27;senderId&#x27;</span>]<br>    answer = <span class="hljs-string">&#x27;测试成功：&#x27;</span> + text_info<br>    <span class="hljs-comment"># 调用函数，发送markdown消息</span><br>    send_md_msg(senderid, answer, webhook_url)<br><br><span class="hljs-comment"># 发送markdown消息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_md_msg</span>(<span class="hljs-params">userid, message, webhook_url</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    userid: @用户 钉钉id</span><br><span class="hljs-string">    title : 消息标题</span><br><span class="hljs-string">    message: 消息主体内容</span><br><span class="hljs-string">    webhook_url: 通讯url</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    message = <span class="hljs-string">&#x27;&lt;font color=#008000&gt;@%s &lt;/font&gt;  \n\n %s&#x27;</span> % (userid, message)<br>    title = <span class="hljs-string">&#x27;大聪明说&#x27;</span><br><br>    data = &#123;<br>        <span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;markdown&quot;</span>,<br>        <span class="hljs-string">&quot;markdown&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;title&quot;</span>:title,<br>            <span class="hljs-string">&quot;text&quot;</span>: message<br>        &#125;,<br>        <span class="hljs-string">&quot;at&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;atDingtalkIds&quot;</span>: [<br>                userid<br>            ],<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment"># 利用requests发送post请求</span><br>    req = requests.post(webhook_url, json=data)<br><br><span class="hljs-comment"># 消息数字签名计算核对</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_sig</span>(<span class="hljs-params">timestamp</span>):<br>    app_secret = <span class="hljs-string">&#x27;BIQ7O8AqNMRiHrW....&#x27;</span><br>    app_secret_enc = app_secret.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    string_to_sign = <span class="hljs-string">&#x27;&#123;&#125;\n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(timestamp, app_secret)<br>    string_to_sign_enc = string_to_sign.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    hmac_code = hmac.new(app_secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()<br>    sign = base64.b64encode(hmac_code).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> sign<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8083</span>)<br></code></pre></td></tr></table></figure>  </details></li></ol><h2 id="◇测试效果"><a href="#◇测试效果" class="headerlink" title="◇测试效果"></a>◇测试效果</h2><p>部署成功后再回到机器人配置页面，这时候配置应该就能保存成功了，回到版本管理与发布中点击调试，会创建调试群，这时候@机器人就能收到消息了，结果如下<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ad302efdd2d4a9ba9140cf19e24139f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><a id="head-4"></a></p><h1 id="★加入chatGPT"><a href="#★加入chatGPT" class="headerlink" title="★加入chatGPT"></a>★加入chatGPT</h1><p>如果你测试机器人能收到消息之后，下一步需要做的就是把handle_info的回复改成chatGPT的回复。</p><h2 id="◇请求代理库PyGPT"><a href="#◇请求代理库PyGPT" class="headerlink" title="◇请求代理库PyGPT"></a>◇请求代理库PyGPT</h2><p>这里使用的是 <a href="https://github.com/PawanOsman/PyGPT">PawanOsman</a> 开发的一个python库，他似乎突破了openAI的某些限制，可以代理我们的请求到  <a href="https://chat.openai.com/chat">https://chat.openai.com/chat</a> ，看起来就像是在使用网页请求一样，并且请求的历史也可以在官网上看到。所以不像是openAI的官方库那么笨，包括GPT3.5。如果你不是一个python开发者，你也可以使用他的 <a href="https://github.com/PawanOsman/chatgpt-io">nodeJs库</a> 或者 <a href="https://github.com/PawanOsman/ChatGPT.Net">.Net库</a> 自行开发非python的机器人</p><p>库的使用很简单，如demo所示，把pyGPT的参数修改成自己的session就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">from</span> pygpt <span class="hljs-keyword">import</span> PyGPT<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    chat_gpt = PyGPT(<span class="hljs-string">&#x27;eyJhbGciOiJkaXIiLCJlbmMiOiJBMR0NN....&#x27;</span>)<br>    <span class="hljs-keyword">await</span> chat_gpt.connect()<br>    <span class="hljs-keyword">await</span> chat_gpt.wait_for_ready()<br>    answer = <span class="hljs-keyword">await</span> chat_gpt.ask(<span class="hljs-string">&#x27;What is the capital of France?&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(answer)<br>    <span class="hljs-keyword">await</span> chat_gpt.disconnect()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    asyncio.run(main())<br></code></pre></td></tr></table></figure><p>修改handle_info中的answer为chatGPT的回复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 处理自动回复消息</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_info</span>(<span class="hljs-params">req_data</span>):<br>    <span class="hljs-comment"># 解析用户发送消息 通讯webhook_url </span><br>    text_info = req_data[<span class="hljs-string">&#x27;text&#x27;</span>][<span class="hljs-string">&#x27;content&#x27;</span>].strip()<br>    webhook_url = req_data[<span class="hljs-string">&#x27;sessionWebhook&#x27;</span>]<br>    senderid = req_data[<span class="hljs-string">&#x27;senderId&#x27;</span>]<br>    <br>    <span class="hljs-comment"># 请求GPT回复，失败重新请求三次</span><br>    retry_count = <span class="hljs-number">0</span><br>    max_retry_count = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">while</span> retry_count &lt; max_retry_count:<br>        <span class="hljs-keyword">try</span>:<br>            chat_gpt = PyGPT(<span class="hljs-string">&#x27;eyJhbGciOiJkaXIiLCJlbmMiOiJBMR0NN....&#x27;</span>)<br>            <span class="hljs-keyword">await</span> chat_gpt.connect()<br>            <span class="hljs-keyword">await</span> chat_gpt.wait_for_ready()<br>            answer = <span class="hljs-keyword">await</span> chat_gpt.ask(text_info)<br>            <span class="hljs-keyword">await</span> chat_gpt.disconnect()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;answer:\n&#x27;</span>, answer)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------------&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            retry_count = retry_count + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;retry_count&#x27;</span>, retry_count)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> answer:<br>        answer = <span class="hljs-string">&#x27;请求接口失败，请稍后重试&#x27;</span><br>    <span class="hljs-comment"># 调用函数，发送markdown消息</span><br>    send_md_msg(senderid, answer, webhook_url)<br></code></pre></td></tr></table></figure><p>有一点需要注意的是，如果我们在钉钉转发过来的http请求里不断的执行上面的代码，每次调用PyGPT都会产生一个新的连接，作者的代理服务器会hold住连接，超过50个socket连接或者短时间内请求太频繁，会被拉黑1～5分钟。所以像这样修改一下代码，在http循环外部创建chat_gpt对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">app = Quart(__name__)<br><span class="hljs-comment"># 定义全局对象</span><br>chat_gpt = <span class="hljs-literal">None</span><br>...<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_info</span>(<span class="hljs-params">req_data</span>):<br>    ...<br>    <span class="hljs-keyword">global</span> chat_gpt<br>    <span class="hljs-keyword">while</span> retry_count &lt; max_retry_count:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> chat_gpt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                connect_task = asyncio.create_task(init_connect())<br>                <span class="hljs-keyword">await</span> connect_task<br>            answer = <span class="hljs-keyword">await</span> chat_gpt.ask(text_info, senderid)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;answer:\n&#x27;</span>, answer)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------------&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            retry_count = retry_count + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;retry_count&#x27;</span>, retry_count)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>            answer = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">if</span> retry_count == <span class="hljs-number">2</span>:<br>                connect_task = asyncio.create_task(init_connect())<br>                <span class="hljs-keyword">await</span> connect_task<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> answer:<br>        answer = <span class="hljs-string">&#x27;请求接口失败，请稍后重试&#x27;</span><br></code></pre></td></tr></table></figure><p>init_connect函数内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_connect</span>():<br>    <span class="hljs-comment"># 建立连接</span><br>    retry_count = <span class="hljs-number">0</span><br>    max_retry_count = <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">while</span> retry_count &lt; max_retry_count:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">global</span> chat_gpt<br>            chat_gpt = PyGPT(<span class="hljs-string">&#x27;eyJhbGciOiJkaXIiLCJlbmMiOiJBMR0NN....&#x27;</span>)<br>            <span class="hljs-keyword">await</span> chat_gpt.connect()<br>            <span class="hljs-keyword">await</span> chat_gpt.wait_for_ready()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e: <br>            retry_count = retry_count + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;retry_count&#x27;</span>, retry_count)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>            <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>为了以后修改配置方便，我们可以把GPT_SESSION和APP_SECRET放到一个config.py文件里并导出 </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">GPT_SESSION</span> = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-attr">APP_SECRET</span> = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-attr">__all__</span> = [<br>  GPT_SESSION,<br>  APP_SECRET,<br>]<br></code></pre></td></tr></table></figure><p>此时index.py的完整代码如下，功能已经可以正常使用了！</p><details><summary>展开查看完整代码</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> pygpt <span class="hljs-keyword">import</span> PyGPT<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> quart <span class="hljs-keyword">import</span> Quart, request<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">import</span> config<br><br>app = Quart(__name__)<br><br>chat_gpt = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>    <span class="hljs-comment"># 第一步验证：是否是post请求</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 签名验证 获取headers中的Timestamp和Sign</span><br>            req_data = <span class="hljs-keyword">await</span> request.get_json()<br>            timestamp = request.headers.get(<span class="hljs-string">&#x27;Timestamp&#x27;</span>)<br>            sign = request.headers.get(<span class="hljs-string">&#x27;Sign&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;request.data-----\n&#x27;</span>, req_data)<br>            <span class="hljs-comment"># 第二步验证：签名是否有效</span><br>            <span class="hljs-keyword">if</span> check_sig(timestamp) == sign:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;签名验证成功-----&#x27;</span>)<br>                <span class="hljs-comment"># 调用数据处理函数</span><br>                <span class="hljs-keyword">await</span> handle_info(req_data)<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(req_data)<br>            <span class="hljs-keyword">else</span>:<br>                result = <span class="hljs-string">&#x27;签名验证失败-----&#x27;</span><br>                <span class="hljs-built_in">print</span>(result)<br>                <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            result = <span class="hljs-string">&#x27;出错啦～～&#x27;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(result)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;钉钉机器人:&#x27;</span> + <span class="hljs-built_in">str</span>(datetime.datetime.now())<br><br><span class="hljs-comment"># 处理自动回复消息</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_info</span>(<span class="hljs-params">req_data</span>):<br>    <span class="hljs-comment"># 解析用户发送消息 通讯webhook_url </span><br>    text_info = req_data[<span class="hljs-string">&#x27;text&#x27;</span>][<span class="hljs-string">&#x27;content&#x27;</span>].strip()<br>    webhook_url = req_data[<span class="hljs-string">&#x27;sessionWebhook&#x27;</span>]<br>    senderid = req_data[<span class="hljs-string">&#x27;senderId&#x27;</span>]<br>    <span class="hljs-comment"># 请求GPT回复，失败重新请求三次</span><br>    retry_count = <span class="hljs-number">0</span><br>    max_retry_count = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">global</span> chat_gpt<br>    <span class="hljs-keyword">while</span> retry_count &lt; max_retry_count:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> chat_gpt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                connect_task = asyncio.create_task(init_connect())<br>                <span class="hljs-keyword">await</span> connect_task<br>            answer = <span class="hljs-keyword">await</span> chat_gpt.ask(text_info, senderid)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;answer:\n&#x27;</span>, answer)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------------&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            retry_count = retry_count + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;retry_count&#x27;</span>, retry_count)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>            answer = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">if</span> retry_count == <span class="hljs-number">2</span>:<br>                connect_task = asyncio.create_task(init_connect())<br>                <span class="hljs-keyword">await</span> connect_task<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> answer:<br>        answer = <span class="hljs-string">&#x27;请求接口失败，请稍后重试&#x27;</span><br>    <span class="hljs-comment"># 调用函数，发送markdown消息</span><br>    send_md_msg(senderid, answer, webhook_url)<br><br><span class="hljs-comment"># 发送markdown消息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_md_msg</span>(<span class="hljs-params">userid, message, webhook_url</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    userid: @用户 钉钉id</span><br><span class="hljs-string">    title : 消息标题</span><br><span class="hljs-string">    message: 消息主体内容</span><br><span class="hljs-string">    webhook_url: 通讯url</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    message = <span class="hljs-string">&#x27;&lt;font color=#008000&gt;@%s &lt;/font&gt;  \n\n %s&#x27;</span> % (userid, message)<br>    title = <span class="hljs-string">&#x27;大聪明说&#x27;</span><br><br>    data = &#123;<br>        <span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;markdown&quot;</span>,<br>        <span class="hljs-string">&quot;markdown&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;title&quot;</span>:title,<br>            <span class="hljs-string">&quot;text&quot;</span>: message<br>        &#125;,<br>        <span class="hljs-comment"># &quot;msgtype&quot;: &quot;text&quot;,</span><br>        <span class="hljs-comment"># &quot;text&quot;: &#123;</span><br>        <span class="hljs-comment">#     &quot;content&quot;: message</span><br>        <span class="hljs-comment"># &#125;,</span><br>        <span class="hljs-string">&quot;at&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;atDingtalkIds&quot;</span>: [<br>                userid<br>            ],<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment"># 利用requests发送post请求</span><br>    req = requests.post(webhook_url, json=data)<br><br><span class="hljs-comment"># 消息数字签名计算核对</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_sig</span>(<span class="hljs-params">timestamp</span>):<br>    app_secret = config.APP_SECRET<br>    app_secret_enc = app_secret.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    string_to_sign = <span class="hljs-string">&#x27;&#123;&#125;\n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(timestamp, app_secret)<br>    string_to_sign_enc = string_to_sign.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    hmac_code = hmac.new(app_secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()<br>    sign = base64.b64encode(hmac_code).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> sign<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_connect</span>():<br>    <span class="hljs-comment"># 建立连接</span><br>    retry_count = <span class="hljs-number">0</span><br>    max_retry_count = <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">while</span> retry_count &lt; max_retry_count:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">global</span> chat_gpt<br>            chat_gpt = PyGPT(config.GPT_SESSION)<br>            <span class="hljs-keyword">await</span> chat_gpt.connect()<br>            <span class="hljs-keyword">await</span> chat_gpt.wait_for_ready()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e: <br>            retry_count = retry_count + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;retry_count&#x27;</span>, retry_count)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>            <span class="hljs-keyword">continue</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 指定host和port，0.0.0.0可以运行在服务器上对外访问，记得开服务器的网络防火墙端口</span><br>    <span class="hljs-comment"># GCP在VPC network -&gt; firewalls -&gt; 增加一条 VPC firewall rules 指定端口，target填 http-server或https-server</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8083</span>)<br></code></pre></td></tr></table></figure></details><h2 id="◇增加上下文功能"><a href="#◇增加上下文功能" class="headerlink" title="◇增加上下文功能"></a>◇增加上下文功能</h2><p>经过使用俺发现此时每次聊天都相当于在官网上重新打开一个聊天窗口，没有上下文的功能。经过调试发现chatGPT的接口和pygpt的源码有一些联系，pygpt的self.socket.call返回对象包括conversationId，messageId，answer，而conversationId正是 <a href="https://chat.openai.com/chat">openai</a> 地址后面的某个对话的id，messageId是对话内上一条回复的parentId，把官网的参数替换到socket.call的参数里，可以完美衔接上一条对话，有了这个关系做上下文语境就简单多了</p><p>这里俺用的是python自带的轻量级数据库sqlite3，</p><ol><li>pygpt请求之前的时候带上senderid参数</li><li>pygpt响应之前看数据库有没有这个用户，有的话就socket.call使用用户的conversation_id、parent_id，没有就使用pygpt默认的随机数。</li><li>获取pygpt响应后，新用户的话就以senderid为主键保存一条数据（id、conversation_id、parent_id）。已经存在的话就把响应的messageId更新到parent_id。</li></ol><p>新建一个sql.py，代码如下，用来导出sql函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> sqlite3<br><br><span class="hljs-keyword">DATABASE</span> = <span class="hljs-string">&#x27;database.db&#x27;</span><br><br># 查询结果元组转字典<br>def dict_factory(<span class="hljs-keyword">cursor</span>, <span class="hljs-keyword">row</span>):<br>  d = &#123;&#125;<br>  <span class="hljs-keyword">for</span> idx, col <span class="hljs-keyword">in</span> enumerate(<span class="hljs-keyword">cursor</span>.description):<br>      d[col[<span class="hljs-number">0</span>]] = <span class="hljs-keyword">row</span>[idx]<br>  <span class="hljs-keyword">return</span> d<br><br># 初始化数据库<br>def init_db():<br>  db = sqlite3.<span class="hljs-keyword">connect</span>(<span class="hljs-keyword">DATABASE</span>, check_same_thread=<span class="hljs-keyword">False</span>)<br>  <span class="hljs-keyword">cursor</span> = db.<span class="hljs-keyword">cursor</span>()<br>  create_table_query = <span class="hljs-string">&#x27;&#x27;&#x27;  CREATE TABLE IF NOT EXISTS user(</span><br><span class="hljs-string">                            id                TEXT PRIMARY KEY     NOT NULL,</span><br><span class="hljs-string">                            name              TEXT                        ,</span><br><span class="hljs-string">                            conversation_id   TEXT                 NOT NULL,</span><br><span class="hljs-string">                            parent_id         TEXT                 NOT NULL,</span><br><span class="hljs-string">                            create_at          timestamp            NOT NULL); &#x27;&#x27;&#x27;</span><br>  <span class="hljs-keyword">cursor</span>.<span class="hljs-keyword">execute</span>(create_table_query)<br>  <span class="hljs-keyword">cursor</span>.<span class="hljs-keyword">close</span>()<br>  db.<span class="hljs-keyword">close</span>()<br>  print(<span class="hljs-string">&#x27;数据库初始化成功&#x27;</span>)<br><br># 获取数据库<br>def get_db():<br>  db = sqlite3.<span class="hljs-keyword">connect</span>(<span class="hljs-keyword">DATABASE</span>, check_same_thread=<span class="hljs-keyword">False</span>)<br>  db.row_factory = dict_factory<br>  <span class="hljs-keyword">return</span> db<br><br># 执行<span class="hljs-keyword">sql</span>语句<br>def query_db(query, args=(), one=<span class="hljs-keyword">False</span>):<br>  db = get_db()<br>  cur = db.<span class="hljs-keyword">cursor</span>()<br>  cur.<span class="hljs-keyword">execute</span>(query, args)<br>  rv = cur.fetchall()<br>  db.<span class="hljs-keyword">commit</span>()<br>  cur.<span class="hljs-keyword">close</span>()<br>  db.<span class="hljs-keyword">close</span>()<br>  <span class="hljs-keyword">return</span> (rv[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> rv <span class="hljs-keyword">else</span> <span class="hljs-keyword">None</span>) <span class="hljs-keyword">if</span> one <span class="hljs-keyword">else</span> rv<br><br>__all__ = [<br>  init_db,<br>  query_db<br>]<br></code></pre></td></tr></table></figure><p>初始化数据库</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">app</span> = <span class="hljs-function"><span class="hljs-title">Quart</span>(<span class="hljs-variable">__name__</span>)</span><br><br><span class="hljs-function"><span class="hljs-title">init_db</span>()</span><br><br><span class="hljs-variable">chat_gpt</span> = <span class="hljs-variable">None</span><br>...<br></code></pre></td></tr></table></figure><p>传递 query_db senderid 参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> chat_gpt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        connect_task = asyncio.create_task(init_connect())<br>        <span class="hljs-keyword">await</span> connect_task<br>    answer = <span class="hljs-keyword">await</span> chat_gpt.ask(text_info, query_db, senderid)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;answer:\n&#x27;</span>, answer)<br></code></pre></td></tr></table></figure><p>把pygpt的源码复制到本地，使用sqlite3保存、更新数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">self, prompt, query_db, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;default&#x27;</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.auth <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> self.validate_token(self.auth):<br>            <span class="hljs-keyword">await</span> self.get_tokens()<br>        conversation = self.get_conversation_by_id(<span class="hljs-built_in">id</span>)<br>        <br>        sqlite_get_data_query = <span class="hljs-string">&quot;&quot;&quot; SELECT * FROM user WHERE id = ? &quot;&quot;&quot;</span><br>        user_record = query_db(sqlite_get_data_query, (<span class="hljs-built_in">id</span>,), <span class="hljs-literal">True</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;user_record&#x27;</span>, user_record)<br><br>        <span class="hljs-comment"># Fix for timeout issue by Ulysses0817: https://github.com/Ulysses0817</span><br>        data = <span class="hljs-keyword">await</span> self.socket.call(event=<span class="hljs-string">&#x27;askQuestion&#x27;</span>, data=&#123;<br>            <span class="hljs-string">&#x27;prompt&#x27;</span>: prompt,<br>            <span class="hljs-string">&#x27;parentId&#x27;</span>: user_record[<span class="hljs-string">&#x27;parent_id&#x27;</span>] <span class="hljs-keyword">if</span> user_record <span class="hljs-keyword">else</span> <span class="hljs-built_in">str</span>(conversation[<span class="hljs-string">&#x27;parent_id&#x27;</span>]),<br>            <span class="hljs-string">&#x27;conversationId&#x27;</span>: user_record[<span class="hljs-string">&quot;conversation_id&quot;</span>] <span class="hljs-keyword">if</span> user_record <span class="hljs-keyword">else</span> <span class="hljs-built_in">str</span>(conversation[<span class="hljs-string">&#x27;conversation_id&#x27;</span>]),<br>            <span class="hljs-string">&#x27;auth&#x27;</span>: self.auth<br>        &#125;, timeout=self.timeout)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ask data---\n&#x27;</span>, data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;error&#x27;</span> <span class="hljs-keyword">in</span> data:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Error: <span class="hljs-subst">&#123;data[<span class="hljs-string">&quot;error&quot;</span>]&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Error: <span class="hljs-subst">&#123;data[<span class="hljs-string">&quot;error&quot;</span>]&#125;</span>&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> user_record <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-comment"># 插入数据</span><br>                sqlite_insert_data_query = <span class="hljs-string">&quot;&quot;&quot;  INSERT INTO user</span><br><span class="hljs-string">                                                (&#x27;id&#x27;, &#x27;name&#x27;, &#x27;conversation_id&#x27;, &#x27;parent_id&#x27;, &#x27;create_at&#x27;)</span><br><span class="hljs-string">                                                VALUES (?,?,?,?,?);  &quot;&quot;&quot;</span><br>                query_db(sqlite_insert_data_query, (<span class="hljs-built_in">id</span>, <span class="hljs-literal">None</span>, data[<span class="hljs-string">&#x27;conversationId&#x27;</span>], data[<span class="hljs-string">&#x27;messageId&#x27;</span>], datetime.datetime.now()))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;插入数据&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 更新数据</span><br>                sqlite_update_data_query = <span class="hljs-string">&quot;&quot;&quot; UPDATE user SET id = ?, name = ?, conversation_id = ?, parent_id = ?, create_at = ? WHERE id = ? &quot;&quot;&quot;</span><br>                query_db(sqlite_update_data_query, (<span class="hljs-built_in">id</span>, <span class="hljs-literal">None</span>, data[<span class="hljs-string">&#x27;conversationId&#x27;</span>], data[<span class="hljs-string">&#x27;messageId&#x27;</span>], datetime.datetime.now(), <span class="hljs-built_in">id</span>))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;更新数据&#x27;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;database error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>        conversation[<span class="hljs-string">&#x27;parent_id&#x27;</span>] = data[<span class="hljs-string">&#x27;messageId&#x27;</span>]<br>        conversation[<span class="hljs-string">&#x27;conversation_id&#x27;</span>] = data[<span class="hljs-string">&#x27;conversationId&#x27;</span>]<br>        <span class="hljs-keyword">return</span> data[<span class="hljs-string">&#x27;answer&#x27;</span>]<br></code></pre></td></tr></table></figure><p>要是增加一条新的对话怎么办呢，就增加一个&#x2F;reset命令，删掉那个用户的数据，下次他请求就会打开新聊天窗口了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 处理自动回复消息</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_info</span>(<span class="hljs-params">req_data</span>):<br>    ...<br>    <span class="hljs-comment"># 打开新聊天窗口</span><br>    <span class="hljs-keyword">if</span> (text_info == <span class="hljs-string">&#x27;/reset&#x27;</span>):<br>        sqlite_delete_data_query = <span class="hljs-string">&quot;&quot;&quot; DELETE FROM &#x27;user&#x27; WHERE id = ? &quot;&quot;&quot;</span><br>        query_db(sqlite_delete_data_query, (senderid,))<br>        send_md_msg(senderid, <span class="hljs-string">&#x27;聊天上下文已重置&#x27;</span>, webhook_url)<br>        <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><h2 id="◇后台运行"><a href="#◇后台运行" class="headerlink" title="◇后台运行"></a>◇后台运行</h2><p><b>注意：</b>我们服务此时在前台运行，如果我们关闭命令行窗口，服务就停止了，要想服务在后台运行并且方便的查看日志，我们可以使用nohup命令，输出的日志保存在nohup.out文件里</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">nohup <span class="hljs-keyword">python3</span> -<span class="hljs-keyword">u</span> <span class="hljs-built_in">index</span>.<span class="hljs-keyword">py</span> &gt; nohup.out <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><p>查看最新30条日志使用tail命令，ctrl+c退出查看日志</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">tail -<span class="hljs-number">30</span>f nohup.<span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p><a id="head-5"></a></p><h1 id="★结束"><a href="#★结束" class="headerlink" title="★结束"></a>★结束</h1><p>以上就是俺划水踩坑的全部内容了，完整代码在 <a href="https://github.com/XueMeijing/dingtalk-chatgpt-bot">dingtalk-chatgpt-bot</a>，第一次发文，才疏学浅，要是有不足之处还请多多指正</p>]]></content>
    
    
    <categories>
      
      <category>有趣</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/28/2022-04-28-hello-world/"/>
    <url>/2022/04/28/2022-04-28-hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
