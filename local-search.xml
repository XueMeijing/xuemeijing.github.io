<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/19/hello-world/"/>
    <url>/2023/03/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>耗时一周，我统计出来了npm下载量前30的仓库，第一竟是它！</title>
    <link href="/2023/03/18/%E8%80%97%E6%97%B6%E4%B8%80%E5%91%A8%EF%BC%8C%E6%88%91%E7%BB%9F%E8%AE%A1%E5%87%BA%E6%9D%A5%E4%BA%86npm%E4%B8%8B%E8%BD%BD%E9%87%8F%E5%89%8D30%E7%9A%84%E4%BB%93%E5%BA%93%EF%BC%8C%E7%AC%AC%E4%B8%80%E7%AB%9F%E6%98%AF%E5%AE%83%EF%BC%81/"/>
    <url>/2023/03/18/%E8%80%97%E6%97%B6%E4%B8%80%E5%91%A8%EF%BC%8C%E6%88%91%E7%BB%9F%E8%AE%A1%E5%87%BA%E6%9D%A5%E4%BA%86npm%E4%B8%8B%E8%BD%BD%E9%87%8F%E5%89%8D30%E7%9A%84%E4%BB%93%E5%BA%93%EF%BC%8C%E7%AC%AC%E4%B8%80%E7%AB%9F%E6%98%AF%E5%AE%83%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>作为一个前端开发人员，我们每天都在使用npm，但是你曾经是否和我一样好奇，下载量最大的包是哪个？每天下载多少次？他们的github star是多少？上周我偶然看到了一个库 <a href="https://www.npmjs.com/package/glob">glob</a>， 每周竟然下载8000万次，与此同时，react只有1500万次，glob是最高的吗，第一又是谁呢？</p><h1 id="统计结果展示"><a href="#统计结果展示" class="headerlink" title="统计结果展示"></a>统计结果展示</h1><p>耗时一周，我统计出来了npm下载量前30的仓库，第一竟是它！supports-color！总下载量 26,108,633,482 次，但 github star 竟然只有 319 个。另外，我做了一个网站，统计了最近一周、最近一月、最近一年、总下载量等各个维度的图表，还没有做优化加载可能有点慢，网站地址 <a href="https://www.npmrank.net/">https://www.npmrank.net/</a></p><p>无图无真相，下面是网站截图<br><img src="https://user-images.githubusercontent.com/35559153/226155971-98090186-88e2-4e45-a483-c66c4409e693.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/35559153/226156027-c2c17c56-f661-41d2-969c-699cf17441d7.png" alt="image"></p><h1 id="分析npm官网接口，获取某个包的下载量"><a href="#分析npm官网接口，获取某个包的下载量" class="headerlink" title="分析npm官网接口，获取某个包的下载量"></a>分析npm官网接口，获取某个包的下载量</h1><p>打开浏览器控制台分析npm接口发现，同一个地址，比如 <a href="https://www.npmjs.com/package/lodash">https://www.npmjs.com/package/lodash</a> ， 从npm首页 Popular libraries 中推荐的库点进去，接口返回的是JSON格式的数据，而从地址栏输入链接进去，返回是服务端渲染好的html。多次控制变量法未能定位是哪个header的原因，我就先不管了（当然不是睡大觉）</p><ol><li>找到返回JSON的接口，copy -&gt; copy as fetch<br><img src="https://user-images.githubusercontent.com/35559153/226098795-aa0de0d3-bbbd-4357-ba5c-acf319b022e5.png" alt="image"></li><li>粘贴到console<br><img src="https://user-images.githubusercontent.com/35559153/226098836-f9629ddc-85f1-44f9-8410-79b6b8a4a0e2.png" alt="image"></li><li>复制header到postman，同时看到有下载量数据<br><img src="https://user-images.githubusercontent.com/35559153/226099349-3b354dbe-c606-40f3-8338-59f4377235e0.png" alt="image"></li><li>打开postman右侧的代码块，找到python代码<br><img src="https://user-images.githubusercontent.com/35559153/226099040-113c03f4-eb54-415a-950c-859070afc99d.png" alt="image"></li><li>复制到test.py，去掉某些空的header<br><img src="https://user-images.githubusercontent.com/35559153/226099169-c1f835e6-8fc6-4635-a426-d2a9725b2e5e.png" alt="image"></li></ol><p>OK，这样获取某一个仓库的接口就完成了，通过这个接口我们可以拿到github地址，仓库版本，最近一年每周的下载量等</p><h1 id="根据npm官方api，获取不同时间段的下载量"><a href="#根据npm官方api，获取不同时间段的下载量" class="headerlink" title="根据npm官方api，获取不同时间段的下载量"></a>根据npm官方api，获取不同时间段的下载量</h1><p>上面官网的接口只是最近一年各周的下载量，有没有其他时间段的呢，找了一圈后发现npm官网提供了这样的接口，<a href="https://github.com/npm/registry/blob/master/docs/download-counts.md">官方api文档</a> ，<br><img src="https://user-images.githubusercontent.com/35559153/226100591-6d6fce11-077f-405c-8ca9-9b415f6eeb96.png" alt="image"><br>通过上面提供的接口，我们可以获取上周、上月、任何一个时间段的下载量，但是需要注意的是，官方api每次最多返回18个月的数据，最早是2015-01-10号的数据，所以统计总下载量时要分段获取每年的下载量后再累加，如果你想统计自己的包被安装了多少次，也是可以滴，接下来就是获取很多包名，循环下载后统计了</p><h1 id="获取19年的排行"><a href="#获取19年的排行" class="headerlink" title="获取19年的排行"></a>获取19年的排行</h1><p>我在网上搜了一下npm downlaod rank，发现只有 <a href="https://gist.github.com/anvaka/8e8fa57c7ee1350e3491">anvaka</a> 19年做的统计符合想要的结果，他下载了npm全部的包并做了各种维度的分析，这个md是他统计的 top 1000依赖的包，不过被依赖的越多下载量越大，误差应该不会很大<br><img src="https://user-images.githubusercontent.com/35559153/226099718-5328c7de-d60e-4b83-ba57-348106bc99e0.png" alt="image"></p><ol><li><p>保存文件到本地 SOURCE_FILE</p></li><li><p>获取包名和仓库地址并存到sqlite数据库</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">从md中拿到库名并存到数据库</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(SOURCE_FILE, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>  lines = f.readlines()<br>  <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    name = re.findall(<span class="hljs-string">r&#x27;\[(.*?)\]&#x27;</span>, line)<br>    href = re.findall(<span class="hljs-string">r&#x27;\((.*?)\)&#x27;</span>, line)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;line\n&#x27;</span>, line)<br>    <span class="hljs-keyword">if</span> name <span class="hljs-keyword">and</span> href:<br>      get_pkgbase_query = <span class="hljs-string">&#x27;&#x27;&#x27;SELECT * FROM pkgbase WHERE id = ?&#x27;&#x27;&#x27;</span><br>      record_base = sql_obj.get(get_pkgbase_query, (name[<span class="hljs-number">0</span>],), one=<span class="hljs-literal">True</span>)<br>      <span class="hljs-keyword">if</span> record_base <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        insert_data_query = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                            INSERT INTO pkgbase</span><br><span class="hljs-string">                            (&#x27;id&#x27;, &#x27;npm_url&#x27;, &#x27;github_url&#x27;, &#x27;homepage_url&#x27;, &#x27;version&#x27;, &#x27;license&#x27;, &#x27;github_star&#x27;, &#x27;size&#x27;, created, updated)</span><br><span class="hljs-string">                            VALUES(?,?,?,?,?,?,?,?,?,?)</span><br><span class="hljs-string">                            &#x27;&#x27;&#x27;</span><br>        sql_obj.update(insert_data_query, (name[<span class="hljs-number">0</span>], NPM_BASE_URL + name[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p> <img src="https://user-images.githubusercontent.com/35559153/226101055-90ffb9e0-65df-4395-b2b0-17359b1ef1a1.png" alt="image"></p></li><li><p>循环请求存储基本数据</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">更新下载量</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>  all_data_query = <span class="hljs-string">&#x27;&#x27;&#x27;SELECT * FROM pkgbase&#x27;&#x27;&#x27;</span><br>  records = sql_obj.get(all_data_query)<br>  <span class="hljs-keyword">for</span> index, record <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(records):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;id&#x27;</span>, record[<span class="hljs-string">&#x27;id&#x27;</span>], index)<br>      <span class="hljs-keyword">try</span>:<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        获取下载量并写入数据库</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        href = NPM_BASE_URL + record[<span class="hljs-string">&#x27;id&#x27;</span>]<br>        npm_response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, href, headers=npm_headers)<br>        npm_data = npm_response.json()<br><br>        <span class="hljs-comment"># pkgbase</span><br>        github_url = npm_data[<span class="hljs-string">&#x27;packageVersion&#x27;</span>].get(<span class="hljs-string">&#x27;repository&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        homepage_url = npm_data[<span class="hljs-string">&#x27;packageVersion&#x27;</span>].get(<span class="hljs-string">&#x27;homepage&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        version = npm_data[<span class="hljs-string">&#x27;packument&#x27;</span>].get(<span class="hljs-string">&#x27;version&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        license = npm_data[<span class="hljs-string">&#x27;packument&#x27;</span>].get(<span class="hljs-string">&#x27;license&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-comment"># 有仓库两个license</span><br>        license = license <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(license) == <span class="hljs-built_in">str</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;-&#x27;</span><br>        versions = npm_data[<span class="hljs-string">&#x27;packument&#x27;</span>].get(<span class="hljs-string">&#x27;versions&#x27;</span>) <span class="hljs-keyword">if</span> npm_data[<span class="hljs-string">&#x27;packument&#x27;</span>].get(<span class="hljs-string">&#x27;versions&#x27;</span>) <span class="hljs-keyword">else</span> []<br>        updated = datetime.datetime.fromtimestamp(versions[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;date&#x27;</span>][<span class="hljs-string">&#x27;ts&#x27;</span>] / <span class="hljs-number">1000</span>).strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>        created = datetime.datetime.fromtimestamp(versions[<span class="hljs-built_in">len</span>(versions) - <span class="hljs-number">1</span>][<span class="hljs-string">&#x27;date&#x27;</span>][<span class="hljs-string">&#x27;ts&#x27;</span>] / <span class="hljs-number">1000</span>).strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br><br>        update_pkgbase_query =  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                                UPDATE pkgbase</span><br><span class="hljs-string">                                SET github_url = ?, homepage_url = ?, version = ?, license = ?, updated = ?, created = ?</span><br><span class="hljs-string">                                WHERE id = ?</span><br><span class="hljs-string">                                &#x27;&#x27;&#x27;</span><br>        sql_obj.update(update_pkgbase_query, (github_url, homepage_url, version, license, updated, created, record[<span class="hljs-string">&#x27;id&#x27;</span>]))<br></code></pre></td></tr></table></figure></li><li><p>更新各个时间段的下载量</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取某一时期的下载量</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_point_downloads</span>(<span class="hljs-params">date_range, package_name</span>):<br>  href = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;NPM_BASE_API_POINT_URL&#125;</span><span class="hljs-subst">&#123;date_range&#125;</span>/<span class="hljs-subst">&#123;package_name&#125;</span>&#x27;</span><br>  response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, href)<br>  data = response.json()<br>  <span class="hljs-keyword">return</span> data[<span class="hljs-string">&#x27;downloads&#x27;</span>]<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取全部下载量，npm每次最多返回18个月的数据，所以分段下载后再累加</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_point_all_downloads</span>(<span class="hljs-params">package_name</span>):<br>  start_time = <span class="hljs-number">2015</span><br>  end_time = datetime.datetime.now().year<br>  all_downloads = <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">for</span> year <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start_time, end_time + <span class="hljs-number">1</span>):<br>    dltype = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;year&#125;</span>&#x27;</span><br>    date_range = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;year&#125;</span>-01-01:<span class="hljs-subst">&#123;year + <span class="hljs-number">1</span>&#125;</span>-01-01&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;date_range&#x27;</span>, date_range)<br><br>    downloads = get_point_downloads(date_range, package_name)<br>    all_downloads += downloads<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;new downloads&#x27;</span>,downloads)<br>    add_data_query = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                    INSERT INTO pkgdownload</span><br><span class="hljs-string">                    (&#x27;id&#x27;, &#x27;dltype&#x27;, &#x27;downloads&#x27;, &#x27;timepoint&#x27;)</span><br><span class="hljs-string">                    VALUES(?,?,?,?)</span><br><span class="hljs-string">                    &#x27;&#x27;&#x27;</span><br>    sql_obj.update(add_data_query, (package_name, dltype, downloads, datetime.datetime.now()))<br><span class="hljs-keyword">return</span> all_downloads<br><br>...<br><br><span class="hljs-comment"># pkgdownload</span><br>base_dltype = [<span class="hljs-string">&#x27;last-day&#x27;</span>, <span class="hljs-string">&#x27;last-week&#x27;</span>, <span class="hljs-string">&#x27;last-month&#x27;</span>, <span class="hljs-string">&#x27;last-year&#x27;</span>, <span class="hljs-string">&#x27;all-time&#x27;</span>]<br><span class="hljs-keyword">for</span> dltype <span class="hljs-keyword">in</span> base_dltype:<br>  <span class="hljs-keyword">if</span> dltype == <span class="hljs-string">&#x27;all-time&#x27;</span>:<br>    downloads = get_point_all_downloads(record[<span class="hljs-string">&#x27;id&#x27;</span>])<br>  <span class="hljs-keyword">else</span>:<br>    downloads = get_point_downloads(dltype, record[<span class="hljs-string">&#x27;id&#x27;</span>])<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dltype&#x27;</span>, dltype)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;downloads&#x27;</span>, downloads)<br>  replaced_dltype = re.sub(<span class="hljs-string">r&#x27;\-&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, dltype)<br>  add_pkgdownload_query =  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                            INSERT INTO pkgdownload</span><br><span class="hljs-string">                            (&#x27;id&#x27;, &#x27;dltype&#x27;, &#x27;downloads&#x27;, &#x27;timepoint&#x27;)</span><br><span class="hljs-string">                            VALUES(?,?,?,?)</span><br><span class="hljs-string">                            &#x27;&#x27;&#x27;</span><br>  sql_obj.update(add_pkgdownload_query, (record[<span class="hljs-string">&#x27;id&#x27;</span>], replaced_dltype, downloads, datetime.datetime.now()))<br></code></pre></td></tr></table></figure></li></ol><h1 id="获取包的github数据"><a href="#获取包的github数据" class="headerlink" title="获取包的github数据"></a>获取包的github数据</h1><p>本来官网接口中返回的有ghapi字段，如 <a href="https://api.github.com/repos/lodash/lodash">https://api.github.com/repos/lodash/lodash</a> ，里面有stargazers_count字段就是star数，但是该接口每小时限速60次，所以无奈只能用爬虫了，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_github_info</span>(<span class="hljs-params">github_url, package_name</span>):<br>  response = requests.get(github_url, headers=github_headers)<br>  soup = BeautifulSoup(response.content, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>  star = soup.find(<span class="hljs-string">&quot;span&quot;</span>, class_=<span class="hljs-string">&#x27;text-bold&#x27;</span>).get_text() <span class="hljs-keyword">if</span> soup.find(<span class="hljs-string">&quot;span&quot;</span>, class_=<span class="hljs-string">&#x27;text-bold&#x27;</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>  update_pkgbase_query =  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                            UPDATE pkgbase</span><br><span class="hljs-string">                            SET github_star = ?</span><br><span class="hljs-string">                            WHERE id = ?</span><br><span class="hljs-string">                            &#x27;&#x27;&#x27;</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;package_name star&#x27;</span>, package_name, star)<br>  sql_obj.update(update_pkgbase_query, (star, package_name))<br></code></pre></td></tr></table></figure><p>第一次使用爬虫库 bs4 的 BeautifulSoup 模块，获取 github star 只有两行代码，也太方便了吧</p><p>就在刚才发现npm也有接口会返回github star数，如 <a href="https://api.github.com/repos/lodash/lodash/pulls?per_page=1">https://api.github.com/repos/lodash/lodash/pulls?per_page=1</a> 里的 stargazers_count ，等有时间我替换一下</p><h1 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h1><p>经过上面一通操作，我们现在有了pkgbase、pkgdownload 这样两张表，内容如下<br><img src="https://user-images.githubusercontent.com/35559153/226102072-71e4b038-c492-4775-a8f8-768a70d9865d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/35559153/226102110-a6c1477a-9023-44c7-93d5-e22615c26f3c.png" alt="image"></p><p>接下来写两个接口，一个是返回下载量排名的的类型，过去一周，过去一年，总下载量等，供前端筛选，使用quart简单起个服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> quart <span class="hljs-keyword">import</span> Quart, request<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">from</span> db <span class="hljs-keyword">import</span> SQLDB<br><br>app = Quart(__name__)<br>sql_obj = SQLDB()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取排名类型</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/ranking/types&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_types</span>():<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-string">&#x27;data&#x27;</span>: get_rank_types(),<br>    <span class="hljs-string">&#x27;success&#x27;</span>: <span class="hljs-literal">True</span><br>  &#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_rank_types</span>():<br>  get_types_query = <span class="hljs-string">&#x27;SELECT DISTINCT dltype FROM pkgdownload&#x27;</span><br>  records = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(convert_type, sql_obj.get(get_types_query)))<br>  <br>  <span class="hljs-keyword">return</span> records<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_type</span>(<span class="hljs-params">record</span>):<br>    dltype = re.sub(<span class="hljs-string">r&#x27;\_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, record[<span class="hljs-string">&#x27;dltype&#x27;</span>])<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-string">&#x27;label&#x27;</span>: dltype,<br>      <span class="hljs-string">&#x27;value&#x27;</span>: dltype<br>    &#125;<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">8080</span>)<br></code></pre></td></tr></table></figure><p>根据排名类型，返回对应的排行数据<br><img src="https://user-images.githubusercontent.com/35559153/226156536-7d15446d-13cd-4a25-b166-ff74d4716357.png" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取包的数据</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/ranking/packages/&lt;path:rank_type&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_packages</span>(<span class="hljs-params">rank_type</span>):<br>  top = request.args.get(<span class="hljs-string">&#x27;top&#x27;</span>)<br>  <span class="hljs-keyword">if</span> top <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    top = <span class="hljs-number">30</span><br>  <span class="hljs-keyword">elif</span> <span class="hljs-built_in">int</span>(top) &gt; <span class="hljs-number">200</span>:<br>    top = <span class="hljs-number">200</span><br>  <span class="hljs-keyword">else</span>:<br>    top = <span class="hljs-built_in">int</span>(top)<br>  rank_types = get_rank_types()<br>  rank_type =  <span class="hljs-built_in">next</span>((c[<span class="hljs-string">&#x27;value&#x27;</span>] <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> rank_types <span class="hljs-keyword">if</span> c[<span class="hljs-string">&#x27;value&#x27;</span>] == rank_type), <span class="hljs-literal">None</span>)<br><br>  <span class="hljs-keyword">if</span> rank_type:<br>    rank_type = re.sub(<span class="hljs-string">r&#x27;\-&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, rank_type)<br>    get_data_query =  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                      SELECT</span><br><span class="hljs-string">                        a.id,</span><br><span class="hljs-string">                        npm_url npmUrl,</span><br><span class="hljs-string">                        github_url githubUrl,</span><br><span class="hljs-string">                        homepage_url homepageUrl,</span><br><span class="hljs-string">                        dltype dltype,</span><br><span class="hljs-string">                        downloads downloads,</span><br><span class="hljs-string">                        github_star githubStar,</span><br><span class="hljs-string">                        version,</span><br><span class="hljs-string">                        license,</span><br><span class="hljs-string">                        updated,</span><br><span class="hljs-string">                        created </span><br><span class="hljs-string">                      FROM</span><br><span class="hljs-string">                        ( SELECT id, dltype, downloads FROM pkgdownload WHERE dltype = ? ORDER BY downloads DESC LIMIT 0, ? ) a,</span><br><span class="hljs-string">                        pkgbase b</span><br><span class="hljs-string">                      WHERE</span><br><span class="hljs-string">                        a.id = b.id </span><br><span class="hljs-string">                      &#x27;&#x27;&#x27;</span><br>    records = sql_obj.get(get_data_query, (rank_type, top))<br><br>    <span class="hljs-keyword">for</span> index, record <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(records):<br>      records[index][<span class="hljs-string">&#x27;rank&#x27;</span>] = index + <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-string">&#x27;data&#x27;</span>: records,<br>      <span class="hljs-string">&#x27;success&#x27;</span>: <span class="hljs-literal">True</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/35559153/226156582-af006bf7-d0df-454e-bce9-8cafdc6052be.png" alt="image"></p><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>如果你看了上面开启服务的的代码，你可能会发现获取排行数据的接口其实还有一个top参数，最大是200条，但是由于图表不方便展示这么多的数据，如果你想自己看一下前200都有哪些包，可以复制接口改一下，如 <a href="https://www.npmrank.net/api/ranking/packages/last-day?top=200">https://www.npmrank.net/api/ranking/packages/last-day?top=200</a> ，如果你想查看超过200的排行，可以打开database.db的pkgdownload表查看</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>以上就是获取npm排行的整个流程了，如果感觉有意思的话欢迎点个赞或者star，后端仓库地址 <a href="https://github.com/XueMeijing/npmrank">npmrank</a> ，在线体验网页链接 <a href="https://www.npmrank.net/">https://www.npmrank.net/</a> ，</p>]]></content>
    
    
    <categories>
      
      <category>有趣</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>创建python版本的chatGPT钉钉机器人</title>
    <link href="/2023/03/12/%E5%88%9B%E5%BB%BApython%E7%89%88%E6%9C%AC%E7%9A%84chatGPT%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <url>/2023/03/12/%E5%88%9B%E5%BB%BApython%E7%89%88%E6%9C%AC%E7%9A%84chatGPT%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<p>什么年代了还在用传统划水网站？来试试这款chatGPT钉钉机器人吧。chatGPT已经火了几个月了，github上面各种GPT插件和机器人🤖️也是层出不穷，俺随大流也做了一个python版本的钉钉机器人，最近感觉服务差不多稳定了，所以在这里分享给大家</p><h1 id="★目录"><a href="#★目录" class="headerlink" title="★目录"></a>★目录</h1><p><a href="#head-1">★前提</a><br><a href="#head-2">★效果展示</a><br><a href="#head-3">★创建钉钉机器人</a><br><a href="#head-4">★加入chatGPT</a><br><a href="#head-5">★结束</a></p><p><a id="head-1"></a></p><h1 id="★前提"><a href="#★前提" class="headerlink" title="★前提"></a>★前提</h1><ol><li>有钉钉管理员权限，没有的话自己建一个测试公司拉小伙伴进来一起划水</li><li>有服务器，python3.9以上的环境或者使用docker</li><li>有chatGPT的session</li><li>有一些python和服务器的基础知识</li></ol><p>俗话说巧妇难为无米之炊，钉钉管理员、服务器、chatGPT的session这三个是必须滴，如果不了解python的话，也可以用下面提到的nodejs或者.NET库</p><p><a id="head-2"></a></p><h1 id="★效果展示"><a href="#★效果展示" class="headerlink" title="★效果展示"></a>★效果展示</h1><p>如果你已经满足了上面的条件，想立即体验的话可以直接克隆到服务器 <a href="https://github.com/XueMeijing/dingtalk-chatgpt-bot">dingtalk-chatgpt-bot</a> ，修改config.js配置后就可以使用了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2eb627ae7f244cb933b153021d1c684~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><a id="head-3"></a></p><h1 id="★创建钉钉机器人"><a href="#★创建钉钉机器人" class="headerlink" title="★创建钉钉机器人"></a>★创建钉钉机器人</h1><h2 id="◇什么是钉钉机器人"><a href="#◇什么是钉钉机器人" class="headerlink" title="◇什么是钉钉机器人"></a>◇什么是钉钉机器人</h2><p><a href="https://open.dingtalk.com/document/orgapp/robot-overview">官方文档</a> 说：在钉钉，机器人是独立存在的一个应用类型，可以开箱即用，也可以进行二次开发，无需和微应用或者群等场景进行强制绑定。<br>官方说的有点绕，在俺的理解中，钉钉机器人就是一个代理服务，可以把你的消息转发给第三方，也可以从第三方再由机器人转发回来。机器人通常用来做消息推送或者资料查询<br>我当时是跟着 <a href="https://xie.infoq.cn/article/0d31f8da82b3191a993e50054">老表</a> 的教程来的，改了一部分东西</p><h2 id="◇创建机器人"><a href="#◇创建机器人" class="headerlink" title="◇创建机器人"></a>◇创建机器人</h2><ol><li>创建公司<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8e149c78b164bb6b89f397001918146~tplv-k3u1fbpfcp-watermark.image" alt="image.png"> </li><li>登录开发者后台，按照如下图示顺序创建应用，提示选择新版和旧版的话选择旧版，注意应用名不能有chatGPT<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfaf47cafebc400cb015114a100acdf8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li>更改配置，这时候保存不了，ip对应的服务还没有启动，我们等下面服务启动之后再来进行这个<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a85d15a112b848bbb32bf3cd45e5dda8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li>点击调试，会创建测试群，测试通过之后上线<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0e4bd1fb05548bf99cdd0791c022d6d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li>在群聊里找到智能群助手，添加机器人，然后@机器人就可以进行玩耍了</li></ol><h2 id="◇开启服务"><a href="#◇开启服务" class="headerlink" title="◇开启服务"></a>◇开启服务</h2><ol><li>安装quart（类似flask，不过可以进行异步处理）  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> quart<br></code></pre></td></tr></table></figure></li><li>创建index.py，写入如下代码  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> quart <span class="hljs-keyword">import</span> Quart<br><br>app = Quart(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello world&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">8083</span>)<br></code></pre></td></tr></table></figure></li><li>开启服务，打开 <a href="http://127.0.0.1:8083/">http://127.0.0.1:8083/</a> 就能看到熟悉的hello world了，很简单对吧？  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> <span class="hljs-built_in">index</span>.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure>  <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c78985b4e164afa9612f842a8770b1a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li>需要注意的是，127.0.0.1是本地开发调试用的，如果部署到服务器，需要改成0.0.0.0端口，并开启网络防火墙，这部分我也不多说了，需要的这看 <a href="https://xie.infoq.cn/article/3340770024c49b5b1a54597d5">老表</a> 的原文吧</li><li>全部代码如下, 更改<code>app_secret</code>为机器人应用信息里的app_secret  <details>  <summary>展开查看完整代码</summary>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> quart <span class="hljs-keyword">import</span> Quart, request<br><br>app = Quart(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>    <span class="hljs-comment"># 第一步验证：是否是post请求</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 签名验证 获取headers中的Timestamp和Sign</span><br>            req_data = <span class="hljs-keyword">await</span> request.get_json()<br>            timestamp = request.headers.get(<span class="hljs-string">&#x27;Timestamp&#x27;</span>)<br>            sign = request.headers.get(<span class="hljs-string">&#x27;Sign&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;request.data-----\n&#x27;</span>, req_data)<br>            <span class="hljs-comment"># 第二步验证：签名是否有效</span><br>            <span class="hljs-keyword">if</span> check_sig(timestamp) == sign:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;签名验证成功-----&#x27;</span>)<br>                <span class="hljs-comment"># 调用数据处理函数</span><br>                <span class="hljs-keyword">await</span> handle_info(req_data)<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(req_data)<br>            <span class="hljs-keyword">else</span>:<br>                result = <span class="hljs-string">&#x27;签名验证失败-----&#x27;</span><br>                <span class="hljs-built_in">print</span>(result)<br>                <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            result = <span class="hljs-string">&#x27;出错啦～～&#x27;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(result)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;钉钉机器人:&#x27;</span> + <span class="hljs-built_in">str</span>(datetime.datetime.now())<br><br><span class="hljs-comment"># 处理自动回复消息</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_info</span>(<span class="hljs-params">req_data</span>):<br>    <span class="hljs-comment"># 解析用户发送消息 通讯webhook_url </span><br>    text_info = req_data[<span class="hljs-string">&#x27;text&#x27;</span>][<span class="hljs-string">&#x27;content&#x27;</span>].strip()<br>    webhook_url = req_data[<span class="hljs-string">&#x27;sessionWebhook&#x27;</span>]<br>    senderid = req_data[<span class="hljs-string">&#x27;senderId&#x27;</span>]<br>    answer = <span class="hljs-string">&#x27;测试成功：&#x27;</span> + text_info<br>    <span class="hljs-comment"># 调用函数，发送markdown消息</span><br>    send_md_msg(senderid, answer, webhook_url)<br><br><span class="hljs-comment"># 发送markdown消息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_md_msg</span>(<span class="hljs-params">userid, message, webhook_url</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    userid: @用户 钉钉id</span><br><span class="hljs-string">    title : 消息标题</span><br><span class="hljs-string">    message: 消息主体内容</span><br><span class="hljs-string">    webhook_url: 通讯url</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    message = <span class="hljs-string">&#x27;&lt;font color=#008000&gt;@%s &lt;/font&gt;  \n\n %s&#x27;</span> % (userid, message)<br>    title = <span class="hljs-string">&#x27;大聪明说&#x27;</span><br><br>    data = &#123;<br>        <span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;markdown&quot;</span>,<br>        <span class="hljs-string">&quot;markdown&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;title&quot;</span>:title,<br>            <span class="hljs-string">&quot;text&quot;</span>: message<br>        &#125;,<br>        <span class="hljs-string">&quot;at&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;atDingtalkIds&quot;</span>: [<br>                userid<br>            ],<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment"># 利用requests发送post请求</span><br>    req = requests.post(webhook_url, json=data)<br><br><span class="hljs-comment"># 消息数字签名计算核对</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_sig</span>(<span class="hljs-params">timestamp</span>):<br>    app_secret = <span class="hljs-string">&#x27;BIQ7O8AqNMRiHrW....&#x27;</span><br>    app_secret_enc = app_secret.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    string_to_sign = <span class="hljs-string">&#x27;&#123;&#125;\n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(timestamp, app_secret)<br>    string_to_sign_enc = string_to_sign.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    hmac_code = hmac.new(app_secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()<br>    sign = base64.b64encode(hmac_code).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> sign<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8083</span>)<br></code></pre></td></tr></table></figure>  </details></li></ol><h2 id="◇测试效果"><a href="#◇测试效果" class="headerlink" title="◇测试效果"></a>◇测试效果</h2><p>部署成功后再回到机器人配置页面，这时候配置应该就能保存成功了，回到版本管理与发布中点击调试，会创建调试群，这时候@机器人就能收到消息了，结果如下<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ad302efdd2d4a9ba9140cf19e24139f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><a id="head-4"></a></p><h1 id="★加入chatGPT"><a href="#★加入chatGPT" class="headerlink" title="★加入chatGPT"></a>★加入chatGPT</h1><p>如果你测试机器人能收到消息之后，下一步需要做的就是把handle_info的回复改成chatGPT的回复。</p><h2 id="◇请求代理库PyGPT"><a href="#◇请求代理库PyGPT" class="headerlink" title="◇请求代理库PyGPT"></a>◇请求代理库PyGPT</h2><p>这里使用的是 <a href="https://github.com/PawanOsman/PyGPT">PawanOsman</a> 开发的一个python库，他似乎突破了openAI的某些限制，可以代理我们的请求到  <a href="https://chat.openai.com/chat">https://chat.openai.com/chat</a> ，看起来就像是在使用网页请求一样，并且请求的历史也可以在官网上看到。所以不像是openAI的官方库那么笨，包括GPT3.5。如果你不是一个python开发者，你也可以使用他的 <a href="https://github.com/PawanOsman/chatgpt-io">nodeJs库</a> 或者 <a href="https://github.com/PawanOsman/ChatGPT.Net">.Net库</a> 自行开发非python的机器人</p><p>库的使用很简单，如demo所示，把pyGPT的参数修改成自己的session就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">from</span> pygpt <span class="hljs-keyword">import</span> PyGPT<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    chat_gpt = PyGPT(<span class="hljs-string">&#x27;eyJhbGciOiJkaXIiLCJlbmMiOiJBMR0NN....&#x27;</span>)<br>    <span class="hljs-keyword">await</span> chat_gpt.connect()<br>    <span class="hljs-keyword">await</span> chat_gpt.wait_for_ready()<br>    answer = <span class="hljs-keyword">await</span> chat_gpt.ask(<span class="hljs-string">&#x27;What is the capital of France?&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(answer)<br>    <span class="hljs-keyword">await</span> chat_gpt.disconnect()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    asyncio.run(main())<br></code></pre></td></tr></table></figure><p>修改handle_info中的answer为chatGPT的回复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 处理自动回复消息</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_info</span>(<span class="hljs-params">req_data</span>):<br>    <span class="hljs-comment"># 解析用户发送消息 通讯webhook_url </span><br>    text_info = req_data[<span class="hljs-string">&#x27;text&#x27;</span>][<span class="hljs-string">&#x27;content&#x27;</span>].strip()<br>    webhook_url = req_data[<span class="hljs-string">&#x27;sessionWebhook&#x27;</span>]<br>    senderid = req_data[<span class="hljs-string">&#x27;senderId&#x27;</span>]<br>    <br>    <span class="hljs-comment"># 请求GPT回复，失败重新请求三次</span><br>    retry_count = <span class="hljs-number">0</span><br>    max_retry_count = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">while</span> retry_count &lt; max_retry_count:<br>        <span class="hljs-keyword">try</span>:<br>            chat_gpt = PyGPT(<span class="hljs-string">&#x27;eyJhbGciOiJkaXIiLCJlbmMiOiJBMR0NN....&#x27;</span>)<br>            <span class="hljs-keyword">await</span> chat_gpt.connect()<br>            <span class="hljs-keyword">await</span> chat_gpt.wait_for_ready()<br>            answer = <span class="hljs-keyword">await</span> chat_gpt.ask(text_info)<br>            <span class="hljs-keyword">await</span> chat_gpt.disconnect()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;answer:\n&#x27;</span>, answer)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------------&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            retry_count = retry_count + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;retry_count&#x27;</span>, retry_count)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> answer:<br>        answer = <span class="hljs-string">&#x27;请求接口失败，请稍后重试&#x27;</span><br>    <span class="hljs-comment"># 调用函数，发送markdown消息</span><br>    send_md_msg(senderid, answer, webhook_url)<br></code></pre></td></tr></table></figure><p>有一点需要注意的是，如果我们在钉钉转发过来的http请求里不断的执行上面的代码，每次调用PyGPT都会产生一个新的连接，作者的代理服务器会hold住连接，超过50个socket连接或者短时间内请求太频繁，会被拉黑1～5分钟。所以像这样修改一下代码，在http循环外部创建chat_gpt对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">app = Quart(__name__)<br><span class="hljs-comment"># 定义全局对象</span><br>chat_gpt = <span class="hljs-literal">None</span><br>...<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_info</span>(<span class="hljs-params">req_data</span>):<br>    ...<br>    <span class="hljs-keyword">global</span> chat_gpt<br>    <span class="hljs-keyword">while</span> retry_count &lt; max_retry_count:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> chat_gpt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                connect_task = asyncio.create_task(init_connect())<br>                <span class="hljs-keyword">await</span> connect_task<br>            answer = <span class="hljs-keyword">await</span> chat_gpt.ask(text_info, senderid)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;answer:\n&#x27;</span>, answer)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------------&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            retry_count = retry_count + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;retry_count&#x27;</span>, retry_count)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>            answer = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">if</span> retry_count == <span class="hljs-number">2</span>:<br>                connect_task = asyncio.create_task(init_connect())<br>                <span class="hljs-keyword">await</span> connect_task<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> answer:<br>        answer = <span class="hljs-string">&#x27;请求接口失败，请稍后重试&#x27;</span><br></code></pre></td></tr></table></figure><p>init_connect函数内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_connect</span>():<br>    <span class="hljs-comment"># 建立连接</span><br>    retry_count = <span class="hljs-number">0</span><br>    max_retry_count = <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">while</span> retry_count &lt; max_retry_count:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">global</span> chat_gpt<br>            chat_gpt = PyGPT(<span class="hljs-string">&#x27;eyJhbGciOiJkaXIiLCJlbmMiOiJBMR0NN....&#x27;</span>)<br>            <span class="hljs-keyword">await</span> chat_gpt.connect()<br>            <span class="hljs-keyword">await</span> chat_gpt.wait_for_ready()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e: <br>            retry_count = retry_count + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;retry_count&#x27;</span>, retry_count)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>            <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>为了以后修改配置方便，我们可以把GPT_SESSION和APP_SECRET放到一个config.py文件里并导出 </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">GPT_SESSION</span> = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-attr">APP_SECRET</span> = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-attr">__all__</span> = [<br>  GPT_SESSION,<br>  APP_SECRET,<br>]<br></code></pre></td></tr></table></figure><p>此时index.py的完整代码如下，功能已经可以正常使用了！</p><details><summary>展开查看完整代码</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> pygpt <span class="hljs-keyword">import</span> PyGPT<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> quart <span class="hljs-keyword">import</span> Quart, request<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">import</span> config<br><br>app = Quart(__name__)<br><br>chat_gpt = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>    <span class="hljs-comment"># 第一步验证：是否是post请求</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 签名验证 获取headers中的Timestamp和Sign</span><br>            req_data = <span class="hljs-keyword">await</span> request.get_json()<br>            timestamp = request.headers.get(<span class="hljs-string">&#x27;Timestamp&#x27;</span>)<br>            sign = request.headers.get(<span class="hljs-string">&#x27;Sign&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;request.data-----\n&#x27;</span>, req_data)<br>            <span class="hljs-comment"># 第二步验证：签名是否有效</span><br>            <span class="hljs-keyword">if</span> check_sig(timestamp) == sign:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;签名验证成功-----&#x27;</span>)<br>                <span class="hljs-comment"># 调用数据处理函数</span><br>                <span class="hljs-keyword">await</span> handle_info(req_data)<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(req_data)<br>            <span class="hljs-keyword">else</span>:<br>                result = <span class="hljs-string">&#x27;签名验证失败-----&#x27;</span><br>                <span class="hljs-built_in">print</span>(result)<br>                <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            result = <span class="hljs-string">&#x27;出错啦～～&#x27;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(result)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;钉钉机器人:&#x27;</span> + <span class="hljs-built_in">str</span>(datetime.datetime.now())<br><br><span class="hljs-comment"># 处理自动回复消息</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_info</span>(<span class="hljs-params">req_data</span>):<br>    <span class="hljs-comment"># 解析用户发送消息 通讯webhook_url </span><br>    text_info = req_data[<span class="hljs-string">&#x27;text&#x27;</span>][<span class="hljs-string">&#x27;content&#x27;</span>].strip()<br>    webhook_url = req_data[<span class="hljs-string">&#x27;sessionWebhook&#x27;</span>]<br>    senderid = req_data[<span class="hljs-string">&#x27;senderId&#x27;</span>]<br>    <span class="hljs-comment"># 请求GPT回复，失败重新请求三次</span><br>    retry_count = <span class="hljs-number">0</span><br>    max_retry_count = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">global</span> chat_gpt<br>    <span class="hljs-keyword">while</span> retry_count &lt; max_retry_count:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> chat_gpt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                connect_task = asyncio.create_task(init_connect())<br>                <span class="hljs-keyword">await</span> connect_task<br>            answer = <span class="hljs-keyword">await</span> chat_gpt.ask(text_info, senderid)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;answer:\n&#x27;</span>, answer)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------------&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            retry_count = retry_count + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;retry_count&#x27;</span>, retry_count)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>            answer = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">if</span> retry_count == <span class="hljs-number">2</span>:<br>                connect_task = asyncio.create_task(init_connect())<br>                <span class="hljs-keyword">await</span> connect_task<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> answer:<br>        answer = <span class="hljs-string">&#x27;请求接口失败，请稍后重试&#x27;</span><br>    <span class="hljs-comment"># 调用函数，发送markdown消息</span><br>    send_md_msg(senderid, answer, webhook_url)<br><br><span class="hljs-comment"># 发送markdown消息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_md_msg</span>(<span class="hljs-params">userid, message, webhook_url</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    userid: @用户 钉钉id</span><br><span class="hljs-string">    title : 消息标题</span><br><span class="hljs-string">    message: 消息主体内容</span><br><span class="hljs-string">    webhook_url: 通讯url</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    message = <span class="hljs-string">&#x27;&lt;font color=#008000&gt;@%s &lt;/font&gt;  \n\n %s&#x27;</span> % (userid, message)<br>    title = <span class="hljs-string">&#x27;大聪明说&#x27;</span><br><br>    data = &#123;<br>        <span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;markdown&quot;</span>,<br>        <span class="hljs-string">&quot;markdown&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;title&quot;</span>:title,<br>            <span class="hljs-string">&quot;text&quot;</span>: message<br>        &#125;,<br>        <span class="hljs-comment"># &quot;msgtype&quot;: &quot;text&quot;,</span><br>        <span class="hljs-comment"># &quot;text&quot;: &#123;</span><br>        <span class="hljs-comment">#     &quot;content&quot;: message</span><br>        <span class="hljs-comment"># &#125;,</span><br>        <span class="hljs-string">&quot;at&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;atDingtalkIds&quot;</span>: [<br>                userid<br>            ],<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment"># 利用requests发送post请求</span><br>    req = requests.post(webhook_url, json=data)<br><br><span class="hljs-comment"># 消息数字签名计算核对</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_sig</span>(<span class="hljs-params">timestamp</span>):<br>    app_secret = config.APP_SECRET<br>    app_secret_enc = app_secret.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    string_to_sign = <span class="hljs-string">&#x27;&#123;&#125;\n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(timestamp, app_secret)<br>    string_to_sign_enc = string_to_sign.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    hmac_code = hmac.new(app_secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()<br>    sign = base64.b64encode(hmac_code).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> sign<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_connect</span>():<br>    <span class="hljs-comment"># 建立连接</span><br>    retry_count = <span class="hljs-number">0</span><br>    max_retry_count = <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">while</span> retry_count &lt; max_retry_count:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">global</span> chat_gpt<br>            chat_gpt = PyGPT(config.GPT_SESSION)<br>            <span class="hljs-keyword">await</span> chat_gpt.connect()<br>            <span class="hljs-keyword">await</span> chat_gpt.wait_for_ready()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e: <br>            retry_count = retry_count + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;retry_count&#x27;</span>, retry_count)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>            <span class="hljs-keyword">continue</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 指定host和port，0.0.0.0可以运行在服务器上对外访问，记得开服务器的网络防火墙端口</span><br>    <span class="hljs-comment"># GCP在VPC network -&gt; firewalls -&gt; 增加一条 VPC firewall rules 指定端口，target填 http-server或https-server</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8083</span>)<br></code></pre></td></tr></table></figure></details><h2 id="◇增加上下文功能"><a href="#◇增加上下文功能" class="headerlink" title="◇增加上下文功能"></a>◇增加上下文功能</h2><p>经过使用俺发现此时每次聊天都相当于在官网上重新打开一个聊天窗口，没有上下文的功能。经过调试发现chatGPT的接口和pygpt的源码有一些联系，pygpt的self.socket.call返回对象包括conversationId，messageId，answer，而conversationId正是 <a href="https://chat.openai.com/chat">openai</a> 地址后面的某个对话的id，messageId是对话内上一条回复的parentId，把官网的参数替换到socket.call的参数里，可以完美衔接上一条对话，有了这个关系做上下文语境就简单多了</p><p>这里俺用的是python自带的轻量级数据库sqlite3，</p><ol><li>pygpt请求之前的时候带上senderid参数</li><li>pygpt响应之前看数据库有没有这个用户，有的话就socket.call使用用户的conversation_id、parent_id，没有就使用pygpt默认的随机数。</li><li>获取pygpt响应后，新用户的话就以senderid为主键保存一条数据（id、conversation_id、parent_id）。已经存在的话就把响应的messageId更新到parent_id。</li></ol><p>新建一个sql.py，代码如下，用来导出sql函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> sqlite3<br><br><span class="hljs-keyword">DATABASE</span> = <span class="hljs-string">&#x27;database.db&#x27;</span><br><br># 查询结果元组转字典<br>def dict_factory(<span class="hljs-keyword">cursor</span>, <span class="hljs-keyword">row</span>):<br>  d = &#123;&#125;<br>  <span class="hljs-keyword">for</span> idx, col <span class="hljs-keyword">in</span> enumerate(<span class="hljs-keyword">cursor</span>.description):<br>      d[col[<span class="hljs-number">0</span>]] = <span class="hljs-keyword">row</span>[idx]<br>  <span class="hljs-keyword">return</span> d<br><br># 初始化数据库<br>def init_db():<br>  db = sqlite3.<span class="hljs-keyword">connect</span>(<span class="hljs-keyword">DATABASE</span>, check_same_thread=<span class="hljs-keyword">False</span>)<br>  <span class="hljs-keyword">cursor</span> = db.<span class="hljs-keyword">cursor</span>()<br>  create_table_query = <span class="hljs-string">&#x27;&#x27;&#x27;  CREATE TABLE IF NOT EXISTS user(</span><br><span class="hljs-string">                            id                TEXT PRIMARY KEY     NOT NULL,</span><br><span class="hljs-string">                            name              TEXT                        ,</span><br><span class="hljs-string">                            conversation_id   TEXT                 NOT NULL,</span><br><span class="hljs-string">                            parent_id         TEXT                 NOT NULL,</span><br><span class="hljs-string">                            create_at          timestamp            NOT NULL); &#x27;&#x27;&#x27;</span><br>  <span class="hljs-keyword">cursor</span>.<span class="hljs-keyword">execute</span>(create_table_query)<br>  <span class="hljs-keyword">cursor</span>.<span class="hljs-keyword">close</span>()<br>  db.<span class="hljs-keyword">close</span>()<br>  print(<span class="hljs-string">&#x27;数据库初始化成功&#x27;</span>)<br><br># 获取数据库<br>def get_db():<br>  db = sqlite3.<span class="hljs-keyword">connect</span>(<span class="hljs-keyword">DATABASE</span>, check_same_thread=<span class="hljs-keyword">False</span>)<br>  db.row_factory = dict_factory<br>  <span class="hljs-keyword">return</span> db<br><br># 执行<span class="hljs-keyword">sql</span>语句<br>def query_db(query, args=(), one=<span class="hljs-keyword">False</span>):<br>  db = get_db()<br>  cur = db.<span class="hljs-keyword">cursor</span>()<br>  cur.<span class="hljs-keyword">execute</span>(query, args)<br>  rv = cur.fetchall()<br>  db.<span class="hljs-keyword">commit</span>()<br>  cur.<span class="hljs-keyword">close</span>()<br>  db.<span class="hljs-keyword">close</span>()<br>  <span class="hljs-keyword">return</span> (rv[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> rv <span class="hljs-keyword">else</span> <span class="hljs-keyword">None</span>) <span class="hljs-keyword">if</span> one <span class="hljs-keyword">else</span> rv<br><br>__all__ = [<br>  init_db,<br>  query_db<br>]<br></code></pre></td></tr></table></figure><p>初始化数据库</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">app</span> = <span class="hljs-function"><span class="hljs-title">Quart</span>(<span class="hljs-variable">__name__</span>)</span><br><br><span class="hljs-function"><span class="hljs-title">init_db</span>()</span><br><br><span class="hljs-variable">chat_gpt</span> = <span class="hljs-variable">None</span><br>...<br></code></pre></td></tr></table></figure><p>传递 query_db senderid 参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> chat_gpt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        connect_task = asyncio.create_task(init_connect())<br>        <span class="hljs-keyword">await</span> connect_task<br>    answer = <span class="hljs-keyword">await</span> chat_gpt.ask(text_info, query_db, senderid)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;answer:\n&#x27;</span>, answer)<br></code></pre></td></tr></table></figure><p>把pygpt的源码复制到本地，使用sqlite3保存、更新数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">self, prompt, query_db, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;default&#x27;</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.auth <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> self.validate_token(self.auth):<br>            <span class="hljs-keyword">await</span> self.get_tokens()<br>        conversation = self.get_conversation_by_id(<span class="hljs-built_in">id</span>)<br>        <br>        sqlite_get_data_query = <span class="hljs-string">&quot;&quot;&quot; SELECT * FROM user WHERE id = ? &quot;&quot;&quot;</span><br>        user_record = query_db(sqlite_get_data_query, (<span class="hljs-built_in">id</span>,), <span class="hljs-literal">True</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;user_record&#x27;</span>, user_record)<br><br>        <span class="hljs-comment"># Fix for timeout issue by Ulysses0817: https://github.com/Ulysses0817</span><br>        data = <span class="hljs-keyword">await</span> self.socket.call(event=<span class="hljs-string">&#x27;askQuestion&#x27;</span>, data=&#123;<br>            <span class="hljs-string">&#x27;prompt&#x27;</span>: prompt,<br>            <span class="hljs-string">&#x27;parentId&#x27;</span>: user_record[<span class="hljs-string">&#x27;parent_id&#x27;</span>] <span class="hljs-keyword">if</span> user_record <span class="hljs-keyword">else</span> <span class="hljs-built_in">str</span>(conversation[<span class="hljs-string">&#x27;parent_id&#x27;</span>]),<br>            <span class="hljs-string">&#x27;conversationId&#x27;</span>: user_record[<span class="hljs-string">&quot;conversation_id&quot;</span>] <span class="hljs-keyword">if</span> user_record <span class="hljs-keyword">else</span> <span class="hljs-built_in">str</span>(conversation[<span class="hljs-string">&#x27;conversation_id&#x27;</span>]),<br>            <span class="hljs-string">&#x27;auth&#x27;</span>: self.auth<br>        &#125;, timeout=self.timeout)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ask data---\n&#x27;</span>, data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;error&#x27;</span> <span class="hljs-keyword">in</span> data:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Error: <span class="hljs-subst">&#123;data[<span class="hljs-string">&quot;error&quot;</span>]&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Error: <span class="hljs-subst">&#123;data[<span class="hljs-string">&quot;error&quot;</span>]&#125;</span>&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> user_record <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-comment"># 插入数据</span><br>                sqlite_insert_data_query = <span class="hljs-string">&quot;&quot;&quot;  INSERT INTO user</span><br><span class="hljs-string">                                                (&#x27;id&#x27;, &#x27;name&#x27;, &#x27;conversation_id&#x27;, &#x27;parent_id&#x27;, &#x27;create_at&#x27;)</span><br><span class="hljs-string">                                                VALUES (?,?,?,?,?);  &quot;&quot;&quot;</span><br>                query_db(sqlite_insert_data_query, (<span class="hljs-built_in">id</span>, <span class="hljs-literal">None</span>, data[<span class="hljs-string">&#x27;conversationId&#x27;</span>], data[<span class="hljs-string">&#x27;messageId&#x27;</span>], datetime.datetime.now()))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;插入数据&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 更新数据</span><br>                sqlite_update_data_query = <span class="hljs-string">&quot;&quot;&quot; UPDATE user SET id = ?, name = ?, conversation_id = ?, parent_id = ?, create_at = ? WHERE id = ? &quot;&quot;&quot;</span><br>                query_db(sqlite_update_data_query, (<span class="hljs-built_in">id</span>, <span class="hljs-literal">None</span>, data[<span class="hljs-string">&#x27;conversationId&#x27;</span>], data[<span class="hljs-string">&#x27;messageId&#x27;</span>], datetime.datetime.now(), <span class="hljs-built_in">id</span>))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;更新数据&#x27;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;database error\n&#x27;</span>, <span class="hljs-built_in">repr</span>(e))<br>        conversation[<span class="hljs-string">&#x27;parent_id&#x27;</span>] = data[<span class="hljs-string">&#x27;messageId&#x27;</span>]<br>        conversation[<span class="hljs-string">&#x27;conversation_id&#x27;</span>] = data[<span class="hljs-string">&#x27;conversationId&#x27;</span>]<br>        <span class="hljs-keyword">return</span> data[<span class="hljs-string">&#x27;answer&#x27;</span>]<br></code></pre></td></tr></table></figure><p>要是增加一条新的对话怎么办呢，就增加一个&#x2F;reset命令，删掉那个用户的数据，下次他请求就会打开新聊天窗口了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 处理自动回复消息</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_info</span>(<span class="hljs-params">req_data</span>):<br>    ...<br>    <span class="hljs-comment"># 打开新聊天窗口</span><br>    <span class="hljs-keyword">if</span> (text_info == <span class="hljs-string">&#x27;/reset&#x27;</span>):<br>        sqlite_delete_data_query = <span class="hljs-string">&quot;&quot;&quot; DELETE FROM &#x27;user&#x27; WHERE id = ? &quot;&quot;&quot;</span><br>        query_db(sqlite_delete_data_query, (senderid,))<br>        send_md_msg(senderid, <span class="hljs-string">&#x27;聊天上下文已重置&#x27;</span>, webhook_url)<br>        <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><h2 id="◇后台运行"><a href="#◇后台运行" class="headerlink" title="◇后台运行"></a>◇后台运行</h2><p><b>注意：</b>我们服务此时在前台运行，如果我们关闭命令行窗口，服务就停止了，要想服务在后台运行并且方便的查看日志，我们可以使用nohup命令，输出的日志保存在nohup.out文件里</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">nohup <span class="hljs-keyword">python3</span> -<span class="hljs-keyword">u</span> <span class="hljs-built_in">index</span>.<span class="hljs-keyword">py</span> &gt; nohup.out <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><p>查看最新30条日志使用tail命令，ctrl+c退出查看日志</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">tail -<span class="hljs-number">30</span>f nohup.<span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p><a id="head-5"></a></p><h1 id="★结束"><a href="#★结束" class="headerlink" title="★结束"></a>★结束</h1><p>以上就是俺划水踩坑的全部内容了，完整代码在 <a href="https://github.com/XueMeijing/dingtalk-chatgpt-bot">dingtalk-chatgpt-bot</a>，第一次发文，才疏学浅，要是有不足之处还请多多指正</p>]]></content>
    
    
    <categories>
      
      <category>有趣</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
